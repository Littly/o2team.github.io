<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Aotu.io]]></title>
  <subtitle><![CDATA[凹凸实验室]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://aotu.io/"/>
  <updated>2015-11-24T11:13:40.000Z</updated>
  <id>http://aotu.io/</id>
  
  <author>
    <name><![CDATA[凹凸实验室]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何优(zhuang)雅(bi)地向别人介绍你的洗面奶]]></title>
    <link href="http://aotu.io/notes/2015/11/24/3D-CleaningCream/"/>
    <id>http://aotu.io/notes/2015/11/24/3D-CleaningCream/</id>
    <published>2015-11-24T13:00:35.000Z</published>
    <updated>2015-11-24T11:13:40.000Z</updated>
    <content type="html"><![CDATA[<p>这是一篇介绍如何在浏览器中展示<del style="background-color: #333!important;color: #333 !important;">洗面奶</del>3D物件的文章。<br><a id="more"></a> </p>
<h3 id="前言">前言</h3><p>这篇文章仅仅是向你介绍应对下面这种的场景的方法：如果有人突然跟你说，你的皮肤挺不错的耶，你用的什么洗面奶，我也想买一个，你会怎么回答呢？手头又没法拿出你的洗面奶给他看，光凭言语无法准确地形容出你的洗面奶到底长什么样。作为前端的程序猿，我会想，这种时候如果可以有一个链接让对方自己去看一下把玩一下，对方势必会对你的洗面奶<del style="background-color: #333!important;color: #333 !important;">高Bigger</del>有更深刻的认识。本文的目的，就是向屏幕对面的程序猿介绍这种高效<del style="background-color: #333!important;color: #333 !important;">搞笑</del>的方式。</p>
<h3 id="走进3D的世界">走进3D的世界</h3><p>在页面里面放几个图片是完全无法满足让观看者自己看自己把玩的要求的。所以这里我们将会使用3D的形式来展现我们的洗面奶。老话说得好，同样是山，却有横看成岭侧成峰的不同。比起2D渲染，3D渲染多了一个维度，由于透视效果，物体遮挡、光照角度、光的反射折射等的存在，观看者在不同的角度观看会得到不同的结果。</p>
<p>在浏览器里面，CSS3提供了3D变换的相关属性，但对于光照相关的需求却是无能为力。而使用Canvas进行绘制的话，如果不依赖封装好的图形库，进行图形变换又是相当麻烦的事情。就算是在CSS中一个简单的2D旋转或者是放大，在Canvas的像素操作中，我们还需要通过矩阵计算才能知道变换后每个像素的位置。正因如此，图形库出现了。</p>
<p>说到图形库，我们不得不提到<a href="http://www.opengl.org" target="_blank" rel="external">OpenGL</a>。OpenGL是一个跨平台的图形编程规范，定义了2D与3D绘制中所需要各种接口，进行图形绘制中所需要的变换，纹理映射，光照等。OpenGL定义的接口很多是为硬件加速设计的。有了各大硬件厂商的支持，OpenGL的渲染效率比起软件渲染高了不止一点点。同时，OpenGL不局限于某平台或者是语言，它只是一个关于图形渲染的规范，对外提供关于图形渲染的各种接口，所以有许多的语言绑定，而在浏览器中用到的是Javascript的绑定WebGL。</p>
<h3 id="ThreeJS">ThreeJS</h3><p><a href="http://threejs.org/" target="_blank" rel="external">ThreeJS</a>是一款在浏览器中进行3D绘制的Javascript库，为使用canvas绘制，WebGL渲染等图形操作提供了简便的API。到底有多简便？在<a href="http://www.pixijs.com" target="_blank" rel="external">PixiJS</a>等2D绘制库中，我们需要场景+物件+贴图来搞定一张图，而在ThreeJS中我们只需要在这基础上额外添加适当光照与一台照相机而已，下面是一个最简单的Demo，绘制了一个旋转的绿色立方体。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();</span><br><span class="line"><span class="comment">/*创建场景*/</span></span><br><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera( <span class="number">75</span>, <span class="built_in">window</span>.innerWidth/<span class="built_in">window</span>.innerHeight, <span class="number">0.1</span>, <span class="number">1000</span> );</span><br><span class="line"><span class="comment">/*创建照相机*/</span></span><br><span class="line"><span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer();</span><br><span class="line"><span class="comment">/*创建渲染器*/</span></span><br><span class="line">renderer.setSize( <span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight );</span><br><span class="line"><span class="built_in">document</span>.body.appendChild( renderer.domElement );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.BoxGeometry( <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> );</span><br><span class="line"><span class="comment">/*创建几何模型*/</span></span><br><span class="line"><span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshBasicMaterial( &#123; color: <span class="number">0x00ff00</span> &#125; );</span><br><span class="line"><span class="comment">/*创建材质*/</span></span><br><span class="line"><span class="keyword">var</span> cube = <span class="keyword">new</span> THREE.Mesh( geometry, material );</span><br><span class="line"><span class="comment">/*几何模型与材质合成为物件*/</span></span><br><span class="line">scene.add( cube );</span><br><span class="line"><span class="comment">/*将物件添加入场景*/</span></span><br><span class="line"></span><br><span class="line">camera.position.z = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	requestAnimationFrame( render );</span><br><span class="line">	cube.rotation.x += <span class="number">0.1</span>;</span><br><span class="line">	cube.rotation.y += <span class="number">0.1</span>;</span><br><span class="line">	renderer.render(scene, camera);</span><br><span class="line">	<span class="comment">/*渲染出在相机camera中看到的scene场景*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">render();</span><br></pre></td></tr></table></figure>
<p>画出来就像这样子：<br></p><p class="user_img"><img src="/img/post/2015-11-24-3D-CleaningCream/rollingCube.png" alt="旋转立方体"></p><p></p>
<p>ThreeJS中提供了少量基础的几何模型，如长方体(Box3)，球体(Sphere)等，但面对我们要实现的洗面奶还是太小儿科了。这是不是说明我们的洗面奶没办法做了？文章都写到这里了，办法肯定是有的。ThreeJS提供了加载外部模型的模块(Loader)，可以加载外部的Obj，json等格式的模型。另外，ThreeJS的<a href="https://github.com/mrdoob/three.js/tree/master/utils/exporters" target="_blank" rel="external">Github仓库</a>中还提供了在3ds Max、Blender等3D绘制软件中导出模型的工具。是的，我们就可以用别的3D建模软件建模再导出成ThreeJS所需要的格式了。</p>
<h3 id="动手">动手</h3><p>我们这里使用的是建模工具是Blender。我们需要先拍下物体的三视图作为建模的参考。导入Blender后，依据三视图，我们很快就可以建出洗面奶的模型。</p>
<p>模型的样子<br></p><p class="user_img"><img src="/img/post/2015-11-24-3D-CleaningCream/modeling.png" alt="建模"></p><p></p>
<p>在Blender中加上ThreeJS的插件之后，我们可以在Blender的文件菜单中见到Export/Three.js(.json)选项。点击之后，选择导出的目录，然后记得在左下角勾上我们要导出的元素。在这个例子中，我们需要导出的是Scene，也就是场景本身。<br></p><p class="user_img"><img src="/img/post/2015-11-24-3D-CleaningCream/exporting.jpg" alt="导出菜单"></p><p></p>
<p>在ThreeJS中进行导入的操作也十分简单。ThreeJS中提供了许多种类的Loader，分别针对不同的使用需求。比如，JSONLoader针对的是.json格式的模型，OBJLoader针对的是.obj格式的模型等等。翻阅网上资料的时候还可以看到SceneLoader的踪影，这就是用来加载整个场景的.json格式文件的。可是在ThreeJS的新版本中，SceneLoader已经被废弃，取而代之的是更为牛叉更为智能的ObjectLoader。ObjectLoader可以判断导出的模型到底是什么种类，从而将它们转化为ThreeJS中的对应对象便于开发者使用。</p>
<p>在这个例子中，我们导出的.json文件中包含的是场景本身。所以，除了需要添加部分ObjectLoader的代码，其余部分的代码甚至比上面那个例子还要简单：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scene,</span><br><span class="line">	camera,</span><br><span class="line">	renderer,</span><br><span class="line">	loader,</span><br><span class="line">	wid,</span><br><span class="line">	hei,</span><br><span class="line">	animate;</span><br><span class="line">	</span><br><span class="line">animate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	renderer.render(scene, camera);</span><br><span class="line">	requestAnimationFrame(animate);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">wid = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">hei = <span class="built_in">window</span>.innerHeight;</span><br><span class="line">camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">45</span>, wid / hei, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">/*创建照相机*/</span></span><br><span class="line"></span><br><span class="line">camera.position.set(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">camera.lookAt(<span class="keyword">new</span> THREE.Vector3(-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">renderer = <span class="keyword">new</span> THREE.WebGLRenderer();</span><br><span class="line">renderer.setSize(wid, hei);</span><br><span class="line"></span><br><span class="line">loader = <span class="keyword">new</span> THREE.ObjectLoader();</span><br><span class="line"><span class="comment">/*创建ObjectLoader*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(renderer.domElement);</span><br><span class="line"></span><br><span class="line">loader.load(<span class="string">'objs/object.json'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">_sce</span>) </span>&#123;</span><br><span class="line">	scene = _sce;</span><br><span class="line">	scene.add(camera);</span><br><span class="line">	animate();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*加载Scene，成功后执行回调开始动画*/</span></span><br></pre></td></tr></table></figure>
<p>浏览器中一看，却不太对劲。形状对了，可是颜色呢？高端黑的洗面奶怎么就变成这么山寨的颜色了，而且每次刷新都变颜色。活了二十几年，小便表示还真没见到过这样的洗面奶。</p>
<p class="user_img"><img src="/img/post/2015-11-24-3D-CleaningCream/neverseen.png" alt="跑马灯"></p>
<p>出现这种情况，毫无疑问是材质的问题。原来我们在建模软件中还没给洗面奶加过材质，所以ThreeJS加载完我们的.json文件后，发现只有模型却没有材质，就给模型加上了一个随机颜色的材质。解决办法也很简单，在ThreeJS中手动贴上贴图就好了。而更简单且有效的办法是，在建模软件中上好贴图再一起导出。</p>
<p>回到Blender中，将洗面奶的表面进行UV展开后导出展开图后，我们新建一张图片，将我们要贴的图放到展开图上的相应位置，再回到Blender中将这张新的图片设为瓶身的材质。渲染一下，检查到效果无误后，将模型导出。这次要记得将左下角的Materials勾上，另外还需要勾上texture的复选框。</p>
<p>将这次导出的模型放到先前的目录下，我们会发现，浏览器中并没有出现想象中的场景。在控制台中可以看到，由于我们没有将贴图一起放到一个目录下，贴图加载失败了。按照要求放好后，我们会更惊奇地发现，浏览器中除了一片黑，什么都没有。这是为什么呢？<br></p><p class="user_img"><img src="/img/post/2015-11-24-3D-CleaningCream/dark.png" alt="一片黑"></p><p></p>
<blockquote>
<p>神说要有光，所以就有了光。</p>
</blockquote>
<p>在3D的世界中，光是非常重要的存在。我们之所以能看见物体，都是因为有光进入了我们的眼球。除去本身会发光的物体，我们能看见的其他的物体，都是因为这些物体将外界的光反射后进入我们眼球了。换句话说，没有光的话我们就什么都看不到。</p>
<p>在ThreeJS中也是如此。如果没有光，我们就看不到自发光以外的材质，视野中将是一片黑。在ThreeJS中，光照也有很多种：全局光照(AmbientLight),有向光(DirectionalLight)，点光源(PointLight)等。在这个例子中，为了360观看整个物体，我们添加一个全局光照。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> light = <span class="keyword">new</span> THREE.AmbientLight( <span class="number">0xffffff</span> );</span><br><span class="line">scene.add( light );</span><br></pre></td></tr></table></figure>
<p>再刷新一下，就可以看见我们的洗面奶了。大功告成!<br></p><p class="user_img"><img src="/img/post/2015-11-24-3D-CleaningCream/completed.png" alt="成功~"></p><p></p>
<h3 id="小结">小结</h3><p>进行3D建模，将物体在浏览器中展示，目前已经有了不少的应用，有的公司在宣传新产品的时候会使用上这样的技术，让消费者可以在浏览器中亲自把玩产品，观察产品的每个小角落，起到了不错的效果。同样的技术并不只是在展示商品的时候能用上。将适当的全景图贴在立方体的内表面，用户视角置于立方体中心点的话，还可以让用户有置身其境的感觉，可以上下左右转动视角观察一个地点周围的景象，做出街景的效果。可以说，浏览器中的3D技术将会有越来越多的用武之地。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是一篇介绍如何在浏览器中展示<del style="background-color: #333!important;color: #333 !important;">洗面奶</del>3D物件的文章。<br>]]>
    
    </summary>
    
      <category term="three.js" scheme="http://aotu.io/tags/three-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[精致化页面重构]]></title>
    <link href="http://aotu.io/notes/2015/11/24/project-summary/"/>
    <id>http://aotu.io/notes/2015/11/24/project-summary/</id>
    <published>2015-11-23T20:23:44.000Z</published>
    <updated>2015-12-01T09:59:54.000Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="一_布局方式">一 布局方式</h2><p>作为一个注重用户体验的 H5 页面，合适的页面布局方式很重要。<br>移动端页面常规布局基本分两种：</p>
<h3 id="1-_流式布局（响应式宽度自适应布局）">1. 流式布局（响应式宽度自适应布局）</h3><p>这是普遍使用的方法，流式布局使用这个标签即可自适应所有尺寸的屏幕。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>优点：响应式、简单、兼容好。<br>缺点：非设计稿尺寸屏幕展现效果可能不是很理想。</p>
<h3 id="2-_版式布局（页面等比缩放布局）">2. 版式布局（页面等比缩放布局）</h3><p><strong>可行方案：</strong></p>
<ol>
<li>页面使用 REM 作为页面数值单位运算。</li>
<li>通过 zoom/scale 整体缩放页面。</li>
</ol>
<p>优点：页面等比缩放，比例与设计稿一致。<br>缺点：大屏手机等比放大后的体验可能不佳。</p>
<h3 id="结论：">结论：</h3><p>两种布局方式各有优劣，项目最终选用流式布局，原因：</p>
<ol>
<li>部分页面还是与现有项目模块共用，版式布局改动成本偏高，不好维护。</li>
<li>考虑到页面在大屏手机等比放大后的体验可能不佳。</li>
<li>流式布局可以针对大屏手机做一些更灵活的排版（配合媒体查询），达到更好的用户体验。</li>
</ol>
<h2 id="二_设计规范">二 设计规范</h2><p>设计规范也是重要元素之一，条件允许情况下，从开发前期就需要跟设计师达成共识制定了一套设计规范。</p>
<p><strong>设计规范需要包括：</strong><br>页面背景色、文字颜色、边框颜色、各种按钮样式、图标等等全局通用样式。</p>
<p class="user_img"><img src="/img/post/2015-11-23-project-summary/1.png"></p>
<p>当然除了前期到设计规范，开发过程中这边也需要分离出一些可复用的组件、公共样式，包括：<br>公共底部、商品组模块、轮播组件等等。</p>
<h2 id="三_技巧">三 技巧</h2><h3 id="1-_还原设计稿的_0-5px">1. 还原设计稿的 0.5px</h3><blockquote>
<p>在 2014 年的 WWDC，“设计响应的 Web 体验” 一讲中，Ted O’Connor 讲到关于“retina hairlines”（retina 极细的线）：在 retina 屏上仅仅显示 1 物理像素的边框。</p>
</blockquote>
<p>简单点说就是：在 Retina 屏的设备上，1px 其实相当于  2 个物理像素，所以 1 个物理像素 = 0.5px。</p>
<p class="user_img"><img src="/img/post/2015-11-23-project-summary/2.png"></p>
<p>实现 0.5px 有很多种方法，这里比较一下各种处理的优缺点：</p>
<h4 id="1-_iOS8_以上支持_0-5px">1. iOS8 以上支持 0.5px</h4><p>实现原理：常规属性。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.border</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">0.5px</span> solid red</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>优点：原生、简单、常规写法。<br>缺点：目前只有 iOS8 以上系统才能支持，iOS7及以下、安卓系统都显示为 0px，可以通过脚本判断系统然后区分处理。</p>
<h4 id="2-_CSS_渐变模拟">2. CSS 渐变模拟</h4><p>实现原理：设置 1px 通过 css 实现的背景图片，50%有颜色，50%透明。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.border</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background-image</span>:<span class="value"><span class="function">linear-gradient</span>(<span class="number">180deg</span>, red, red <span class="number">50%</span>, transparent <span class="number">50%</span>), <span class="function">linear-gradient</span>(<span class="number">270deg</span>, red, red <span class="number">50%</span>, transparent <span class="number">50%</span>), <span class="function">linear-gradient</span>(<span class="number">0deg</span>, red, red <span class="number">50%</span>, transparent <span class="number">50%</span>), <span class="function">linear-gradient</span>(<span class="number">90deg</span>, red, red <span class="number">50%</span>, transparent <span class="number">50%</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">100%</span> <span class="number">1px</span>, <span class="number">1px</span> <span class="number">100%</span>, <span class="number">100%</span> <span class="number">1px</span>, <span class="number">1px</span> <span class="number">100%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background-repeat</span>:<span class="value"> no-repeat</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background-position</span>:<span class="value"> top, right top, bottom, left top</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>优点：兼容性较好，单边框、多边框可实现，大小、颜色可配置。<br>缺点：代码量多、无法实现圆角、同时占用了背景样式</p>
<h4 id="3-_阴影">3. 阴影</h4><p>实现原理：利用 css 对阴影处理的方式模拟。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.border</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> -<span class="number">1px</span> <span class="function">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>优点：兼容性较好，单边框、多边框、圆角可实现，大小、颜色、可配置。<br>缺点：模拟效果强差人意，颜色不好配置。</p>
<h4 id="4-_viewport_+_rem">4. viewport + rem</h4><p>实现原理：通过设置页面 viewport 与对应 rem 基准值。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- devicePixelRatio = 2：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- devicePixelRatio = 3：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>优点：兼容比较好，写法跟常规写法无异。<br>缺点：老项目改用 rem 单位成本较高。</p>
<h4 id="5-_border-image">5. border-image</h4><p>实现原理：通过图片配合边框背景模拟。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.border-image</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">border-image</span>:<span class="value"> <span class="function">url</span>() <span class="number">2</span> <span class="number">0</span> stretch</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border-width</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>优点：无。<br>缺点：图片边缘模糊，大小、颜色更改不灵活。</p>
<h4 id="6-_CSS3_缩放">6. CSS3 缩放</h4><p>实现原理：利用 :before/:after 重做 border，配合 scale 使得伪元素缩小一半<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$bor_style</span> <span class="value">: <span class="number">1px</span> solid <span class="hexcolor">#ddd</span>;</span></span><br><span class="line">%<span class="attribute">border-top</span>-1pt &#123;</span><br><span class="line">    <span class="attribute">content</span><span class="value">: <span class="string">''</span>;</span></span><br><span class="line">    <span class="attribute">height</span><span class="value">: <span class="number">0</span>;</span></span><br><span class="line">    <span class="attribute">display</span><span class="value">: block;</span></span><br><span class="line">    <span class="attribute">border-bottom</span><span class="value">: <span class="variable">$bor_style</span>;</span></span><br><span class="line">    <span class="attribute">position</span><span class="value">: absolute;</span></span><br><span class="line">    <span class="attribute">left</span><span class="value">: <span class="number">0</span>;</span></span><br><span class="line">    <span class="attribute">right</span><span class="value">: <span class="number">0</span>;</span></span><br><span class="line">    <span class="attribute">top</span><span class="value">: <span class="number">0</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span><span class="preprocessor"> only</span><span class="preprocessor"> screen</span><span class="preprocessor"> and</span> (-webkit-min-device-pixel-ratio:<span class="number">2</span>) &#123;</span></span><br><span class="line">    %<span class="attribute">border-top</span>-1pt &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span><span class="value">: <span class="function">scaleY</span>(<span class="number">0.5</span>);</span></span><br><span class="line">        -webkit-<span class="attribute">transform-origin</span><span class="value">: <span class="number">50%</span> <span class="number">0%</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>优点：实现简单、单边框、多边框、圆角可实现，大小、颜色可配置。<br>缺点：代码量多，可通过 sass 预处理器处理。</p>
<h4 id="总结：">总结：</h4><p>经过比较与实操测试，最好的处理方式是 CSS3 缩放，目前项目已经在广泛使用。</p>
<h3 id="2-_Flexbox_布局">2. Flexbox 布局</h3><blockquote>
<p>Flexbox Layout（弹性盒模型）模块（目前W3C工作草案正在最后通过）的目的是为了提供一种更有效的方式来布局，使各模块即使大小是未知或者动态的也可以在项目空间中合理分配位置（就像“弹性”这个词一样）。</p>
</blockquote>
<p>项目哪些地方可以使用 flexbox？比如这些</p>
<p class="user_img"><img src="/img/post/2015-11-23-project-summary/3.png"></p>
<h4 id="基本语法：">基本语法：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">ul</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> box</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> -webkit-box</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> flex</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> -webkit-flex</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="tag">ul</span> <span class="tag">li</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">flex</span>:<span class="value"> <span class="number">1</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-flex</span>:<span class="value"> <span class="number">1</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">box-flex</span>:<span class="value"> <span class="number">1</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-box-flex</span>:<span class="value"> <span class="number">1</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-_元素水平垂直居中">3. 元素水平垂直居中</h3><p>实现的方法有很多种，下面几种比较常用：</p>
<h4 id="1-_表格方法：">1. 表格方法：</h4><p>实现方法：表格内容本来就是垂直居中的，可以通过模拟表格处理。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"box_center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.box_center</span> &#123;</span><br><span class="line">    <span class="attribute">display</span><span class="value">: table-cell;</span></span><br><span class="line">    <span class="attribute">width</span><span class="value">: <span class="number">300px</span>;</span></span><br><span class="line">    <span class="attribute">height</span><span class="value">: <span class="number">300px</span>;</span></span><br><span class="line">    <span class="attribute">text-align</span><span class="value">: center;</span></span><br><span class="line">    <span class="attribute">vertical-align</span><span class="value">: middle;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class">.box_center</span> <span class="class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">display</span><span class="value">: inline-block;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-_vertical-align:_middle">2. vertical-align: middle</h4><p>实现方法：利用空元素占位实现<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"box_center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"placeholder"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.box_center</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">300px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.box_center</span> <span class="class">.inner</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.box_center</span> <span class="class">.placeholder</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">vertical-align</span>:<span class="value"> middle</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-_绝对定位">3. 绝对定位</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">%<span class="tag">box_center</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">300px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-_使用_transform_实现">4. 使用 transform 实现</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%<span class="tag">box_center</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"> <span class="function">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>)</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>兼容性：Android2.3 系统浏览器不支持容器直接使用 fixed 进行定位，外加 fixed 容器可解决。</p>
<h4 id="结论：-1">结论：</h4><p>经过各种场景的适用型比较，项目使用  transform 实现，兼容性好且使用方便。</p>
<h3 id="4-_图片占位">4. 图片占位</h3><p>图片未加载出来之前浏览器是无法计算出图片实际尺寸的，所以会出现一个问题，页面刚打开各种元素会因为图片未完全加载而跳动/错位。</p>
<p>这里推荐一种兼容性很好做法简单的方法：</p>
<p><strong>实现原理：</strong><br>通过图片宽高比例计算出图片所需占位空间，赋值于外容器，图片再绝对定位在等比缩放的容器当中。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.placeholder</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span>:</span><br><span class="line">    height: <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding-top</span>:<span class="value"> <span class="number">100%</span>:</span><br><span class="line"></span></span></span>&#125;</span><br><span class="line"><span class="class">.placeholder</span> <span class="tag">img</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> auto</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>计算公式：</strong><br>padding-top = 图片高度(px)/图片宽度(px) * 100%</p>
<p><strong>比如：</strong><br>1:1 比例的图片 padding-top: 100%;<br>2:1 比例的图片 padding-top: 50%;</p>
<h2 id="四_尽可能减少样式图片">四 尽可能减少样式图片</h2><p>大多图标元素都可以使用 CSS 样式绘制，可以大大减少样式图资源请求还有增强图标可维护性。<br>比如：链接箭头、圆点、优惠券点点、选择框、checkbox等等。</p>
<p class="user_img"><img src="/img/post/2015-11-23-project-summary/4.png"></p>
<h2 id="五_使用_WebP_格式图片">五 使用 WebP 格式图片</h2><blockquote>
<p>WebP 格式，由 google 于 2010 年推出的新一代图片格式，在压缩方面比 JPEG 格式更优越，并能节省大量的服务器带宽资源和数据空间。与 JPEG 相同，WebP 也是一种有损压缩，主要优势在于高效率。在质量相同的情况下，WebP 格式图像的体积要比 JPEG 格式图像小 40%。</p>
</blockquote>
<p>项目中大部分页面素材图都使用了 WebP 格式，兼容方案：</p>
<ol>
<li><p><strong>打开场景是浏览器：</strong>通过 javascript 检测，对支持 WebP 的用户输出 WebP 格式图片。<br>WebP 支持 插件：<a href="http://webpjs.appspot.com/" target="_blank" rel="external">http://webpjs.appspot.com/</a></p>
</li>
<li><p><strong>打开场景是APP：</strong>根据不同系统使用 Android WebP 解析库或iOS WebP 解析库做兼容解析。<br>Android4.0 以下解析库：<a href="https://github.com/alexey-pelykh/webp-android-backport" target="_blank" rel="external">https://github.com/alexey-pelykh/webp-android-backport</a><br>iOS 解析库：<a href="https://github.com/carsonmcdonald/WebP-iOS-example" target="_blank" rel="external">https://github.com/carsonmcdonald/WebP-iOS-example</a></p>
</li>
</ol>
<p>PS：除了 Android4.0 以上提供原生支持</p>
<p>资料参考：<a href="http://isux.tencent.com/introduction-of-webp.html" target="_blank" rel="external">http://isux.tencent.com/introduction-of-webp.html</a></p>
<p><strong>结论：</strong><br>保证图片高清质量的同时，大大压缩了图片大小，节省了服务器带宽资源和数据空间。</p>
<h2 id="六_APP缓存策略">六 APP缓存策略</h2><p>注： APP缓存策略由开发同学提供</p>
<h3 id="1-_缓存方式">1. 缓存方式</h3><ul>
<li><p>模块化的使用 APP 缓存，写入磁盘，包括 HTML、JS、CSS。</p>
</li>
<li><p>图片使用浏览器缓存，稳定后的背景图以及常用图片也使用 APP 缓存。</p>
</li>
</ul>
<h3 id="2-_缓存更新">2. 缓存更新</h3><ul>
<li><p><strong>主模块更新：</strong>APP 打开就发送主模块版本号到服务端，返回有更新的模块内容以及版本号，并且返回所有模块版本索引。</p>
</li>
<li><p><strong>子模块更新：</strong>进去一个主模块，在加载完成后，会检查所有子模块版本索引，并获取需要更新的模块内容。</p>
</li>
<li><p><strong>当前模块更新：</strong>在直接打开模块时（非首页进入），会去 check/更新一下当前版本，然后在加载。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<a id="more"></a>
<h2 id="一_布局方式">一 布局方式</h2><p>作为一个注重用户体验的 H5 页面，合适的页面布局方式很重要。<br>移动端页面常规布局基本分两种：</p>
<h3 id="1-_流式布局（响应式宽度自适应布局）">1. 流式布局（]]>
    </summary>
    
      <category term="summary" scheme="http://aotu.io/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[以电影之眼看CSS3动画（二）]]></title>
    <link href="http://aotu.io/notes/2015/11/23/css3-animation-to-movie-part_2/"/>
    <id>http://aotu.io/notes/2015/11/23/css3-animation-to-movie-part_2/</id>
    <published>2015-11-22T17:27:00.000Z</published>
    <updated>2015-12-01T02:57:53.000Z</updated>
    <content type="html"><![CDATA[<h1 id="以电影之眼看CSS3动画（二）">以电影之眼看CSS3动画（二）</h1><hr>
<pre><code>注：此文非干货聚集地，来找干货的对不住了。
</code></pre><p>上回说到CSS3动画与传统动画之间千丝万缕的联系，现在就让我们来探讨一下用CSS3动画做一部动画电影都需要些什么。</p>
<p>一、</p>
<p><strong>首先你需要一个故事。</strong></p>
<p>即使只是一堆雪花往下掉，也是包含故事的——为什么下雪？是冬天来了？那是冬天的第一场雪吗？第一场雪有什么特点呢？好吧作为一个从没见过雪的南方人我承认我给自己挖了个坑，不过就是类似这种思路，让我们拥有了一个故事，所以，即使只有一秒钟的动画也是有故事的。Use your imagination.</p>
<p>小tip：在做影视题材的专题页时，我会首先根据相关影视的预告片确定入场动画的风格与基调，观看预告片不仅能够了解影片的风格，同时还能学习其字幕出现、消失以及转场的方式，获得一种节奏感，也就是上面所说的时间掌控。在看电影正片时也可留意影片开头与结尾字幕出现的形式，尤其是科幻片，电影字幕的设计与电影风格相辅相成，常常能让你脑洞大开——原来还能这么玩。</p>
<p><img src="/img/post/2015-11-22-css3-animation-to-movie/2-1_preview_of_overheard_3.gif" alt="preview_of_overheard_3"></p>
<ul>
<li><a href="http://movie.douban.com/trailer/156598/#content" target="_blank" rel="external">[窃听风云3]预告片</a>中字幕出现的方式表现出信号干扰的效果，由此可以将影片相关专题作出这样的开场动画——</li>
</ul>
<p><img src="/img/post/2015-11-22-css3-animation-to-movie/2-2_animation_design_of_overheard_3_broadcast.gif" alt="animation_design_of_overheard_3_broadcast"></p>
<ul>
<li>视觉设计：吴丹枫</li>
</ul>
<p><img src="/img/post/2015-11-22-css3-animation-to-movie/2-3_frames_of_animation.png" alt="frames_of_animation"></p>
<ul>
<li>简单的几个不同色调的图片进行替换就能做出类似效果。（<a href="http://labs.qiang.it/labs/EC_demo/Doing_Movie_by_CSS3.html" target="_blank" rel="external">demo地址</a>）</li>
</ul>
<p>二、</p>
<p>当我们在脑内小剧场构思好动画小故事之后（当然，你也可以将它写下来），我们就可以进行<strong>关键帧与时间轴的设计</strong>了。</p>
<blockquote>
<p>任何人都可以用电脑动画软件将一个物体移动。但是如何赋予物体重量、大小、规模、移动和幽默感，这些都与你如何移动物体相关。电脑不能为动画师创造动画，动画师仍然需要了解时间掌握的原则知识以赋予电脑动画生命力。（《动画的时间掌握》）</p>
</blockquote>
<p>这时需要注意的是因果关系对动画的影响，“一个动画师必须懂得自然界物体运动的力学知识”，这样“才能创造情绪和表达正确的感觉。”我们来看看为了使动画更加流畅真实，迪士尼爷爷想出了什么办法。［白雪公主与七个小矮人］作为80、90后动画电影启蒙，使用了一项革新动画制作的技术——<a href="http://zh.wikipedia.org/wiki/%E8%BD%AC%E6%8F%8F%E6%9C%BA%E6%8A%80%E6%9C%AF" target="_blank" rel="external">转描机</a>。</p>
<ul>
<li>（视频 <a href="http://player.ku6.com/refer/TH-adgFO0MjSKh3i/v.swf" target="_blank" rel="external">http://player.ku6.com/refer/TH-adgFO0MjSKh3i/v.swf</a> ）</li>
</ul>
<p><img src="/img/post/2015-11-22-css3-animation-to-movie/2-4_sidelights_of_snow_white.gif" alt="sidelights_of_snow_white"></p>
<ul>
<li>视频：[白雪公主与七个小矮人]（1974）幕后花絮</li>
</ul>
<p>视频中有一个细节，迪士尼爷爷让动画师注意那位大叔在跳踢踏舞时重力对裤腿的作用（19分15秒）。是的，迪士尼爷爷强调的就是动画与物理学的关系。其实即使是网页中的动画也能用到牛顿运动定律，将网页元素看作一个有重量、有结构、有柔韧性的物体进行动画设计，会得到意想不到的效果。事实上已经有人这么做了——</p>
<p><img src="/img/post/2015-11-22-css3-animation-to-movie/2-5_dribbble_form_animation.gif" alt="dribbble_form_animation"></p>
<ul>
<li>dribbble’s stripe checkout（图片来源：<a href="http://markgeyer.com/pres/the-art-of-ui-animations/#/2/9" target="_blank" rel="external">The Art of Animation</a>）</li>
</ul>
<p>Adds a bit of realism to an otherwise static interface. ——<a href="http://markgeyer.com/pres/the-art-of-ui-animations/#/2/5" target="_blank" rel="external">The 12 basic principles of animation - The Art of Animation</a></p>
<p><img src="/img/post/2015-11-22-css3-animation-to-movie/2-6_bouncejs_example.gif" alt="bouncejs_example"></p>
<ul>
<li>图片来源：<a href="https://medium.com/tictail-makers/giving-animations-life-8b20165224c5" target="_blank" rel="external">Giving Animations Life</a></li>
</ul>
<p>Using Bounce.js and classical animation concepts to bring life to user interfaces. ——<a href="https://medium.com/tictail-makers/giving-animations-life-8b20165224c5" target="_blank" rel="external">Giving Animations Life</a></p>
<p>三、</p>
<p><strong>不断的修改与调整。</strong></p>
<p>这是一个需要细致与耐心的过程，你得在不断的调整中保持大局观，避免陷入细节的纠结，同时又需要有能够将别扭的细节调整好的灵感。说白了就是同时拥有汉子的粗犷与妹子的细腻。节奏是一个很重要的要素，与银幕上的动画类似，CSS3动画创作者的意念必须即时并完全交给观众。</p>
<blockquote>
<p>意念清晰易懂靠两个因素：1、好的表现手法和设计，要使每个主要动作能以最清楚和最有效的方式呈现在银幕上。2、好的时间掌握，要有足够的时间先使用户预感到将有什么事情发生，然后用于表现动作本身，最后要有好的收尾。这三者中，任何一项所占时间太多，便会感觉节奏太慢，用户会感到不耐烦，动画的出现便如同鸡肋。反之，如果时间太短，那么用户在注意到它之前，动作已经结束，创作者的意念未能充分表达，就浪费掉了。——《动画的时间掌握》</p>
</blockquote>
<p>四、</p>
<p>别忘了进行<strong>性能测试</strong>。</p>
<p>这是一步有可能推翻前面两步甚至三步的一个步骤。但是即便发生了这样的事，也不要气馁，这并不意味着之前做的前功尽弃，反而是个宝贵的财富——对于性能的感受又多了一次体验，而其中的一些动画心得或许下次也能用上。</p>
<p>说了这么多，一切都显得辣么抽象，下面就上栗子。</p>
<p><img src="/img/post/2015-11-22-css3-animation-to-movie/2-7_animation_of_an_eye.gif" alt="animation_of_an_eye"></p>
<ul>
<li>动画来源：<a href="http://tympanus.net/Development/PseudoElementsAnimationsTransitions/index4.html" target="_blank" rel="external">Pseudo-Elements Animations and Transitions</a></li>
</ul>
<p>这是个使用了最简单的css属性——padding、line-height、box-shadow——实现了令人吃了一斤效果的栗子，就像一道脑筋急转弯一样让大家对CSS3的动画的理解不止于CSS3的新属性，我们曾经用烂的CSS2.0属性同样也能开出花儿。</p>
<p>我们看到，CSS3动画并不只是由transform、opacity等等简单组成，它还可以包含许许多多的设计、想法、甚至感情。台上一分钟，台下十年功在动画上也适用，或许在所有事物上都适用。</p>
<p>目前为止用CSS3动画拍电影只是个概念，但想象一下你是这部电影的导演，所有元素都是可调度的场景与角色，用CSS3动画拍电影是不是也没有那么遥远了？</p>
<p>最后，我想将我一直以来没能找到合适实现方法的动画效果放上来，希望能够抛砖引玉、集思广益：</p>
<p><img src="/img/post/2015-11-22-css3-animation-to-movie/2-8_frames_of_flame_1.jpg" alt="frames_of_flame_1"></p>
<p><img src="/img/post/2015-11-22-css3-animation-to-movie/2-9_frames_of_flame_2.jpg" alt="frames_of_flame_2"></p>
<ul>
<li>A 冷空气从火的底部冲入，受热后上升。 B 一套火的循环①-⑧，标以×的漩涡一个接一个地向上升起。升得越高，速度越慢。</li>
</ul>
<blockquote>
<p>火焰的动作受火的上部流动着的空气的控制。最热的部分在火的中央，在这之上热空气上升，当热空气上升时，旁边的冷空气冲入取代热空气的位置。这部分冷空气变热后又上升，这个过程重复不已。空气的流通常常使火焰成为粗略的圆锥形，由冷空气的漩涡形成一连串锯齿状火焰，从火的底部向里和向上移动。（《动画的时间掌握》）</p>
</blockquote>
<p>除了空气与火焰的关系外，火焰的运动由于随机性很大，循环动画需要写得看不出动作在循环也是难点之一。如何才能在保证结构、性能的同时做出最佳的火焰效果？</p>
<p>最最后，放上迪士尼爷爷的一段话，在我做动画甚至做任何事时它将不断地在脑海中回响：</p>
<p>曾经有人问迪士尼，[白雪公主]大受欢迎的秘密是什么？他回答说：</p>
<p>“我们只能确定一件事，每一个人都有童年，每次拍一部新片，我们不是为大人而拍，也不只是为小孩子拍，我们是为了唤醒每个人内心深处那种早就被遗忘的纯真世界。”</p>
<h2 id="参考资料：">参考资料：</h2><ul>
<li><p><a href="http://www.amazon.cn/%E5%8A%A8%E7%94%BB%E7%9A%84%E6%97%B6%E9%97%B4%E6%8E%8C%E6%8F%A1-%E5%93%88%E7%BD%97%E5%BE%B7%E2%80%A2%E5%A8%81%E7%89%B9%E5%85%8B/dp/B0094N5III/ref=sr_1_1?ie=UTF8&amp;qid=1420369719&amp;sr=8-1&amp;keywords=%E5%8A%A8%E7%94%BB%E7%9A%84%E6%97%B6%E9%97%B4%E6%8E%8C%E6%8F%A1" target="_blank" rel="external">《动画的时间掌握（修订版）》</a>[英]哈罗德•威特克；[英]约翰•哈拉斯；[美]汤姆•赛图</p>
</li>
<li><p><a href="http://markgeyer.com/pres/the-art-of-ui-animations/#/" target="_blank" rel="external">The Art of UI Animations</a> </p>
</li>
</ul>
<h2 id="推荐：">推荐：</h2><ul>
<li><p><a href="ttp://isux.tencent.com/css3/tools.html" target="_blank" rel="external">ISUX动画工具、动画手册</a></p>
<blockquote>
<p>了解所有与CSS3动画相关的属性，使用动画工具更直观地调整变形。</p>
</blockquote>
</li>
<li><p><a href="http://minyos.its.rmit.edu.au/aim/a_notes/anim_principles.html" target="_blank" rel="external">12 Principles of Animation</a></p>
<blockquote>
<p>最近存在感极强的动画12原则，如果想要做出自然流畅的CSS3动画，这个由迪士尼动画巨头所总结出的经典原则绝对是必读之物。这里附上视频版：<a href="http://vimeo.com/93206523" target="_blank" rel="external">http://vimeo.com/93206523</a></p>
</blockquote>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="以电影之眼看CSS3动画（二）">以电影之眼看CSS3动画（二）</h1><hr>
<pre><code>注：此文非干货聚集地，来找干货的对不住了。
</code></pre><p>上回说到CSS3动画与传统动画之间千丝万缕的联系，现在就让我们来探讨一下用CSS3]]>
    </summary>
    
      <category term="Animation" scheme="http://aotu.io/tags/Animation/"/>
    
      <category term="CSS3" scheme="http://aotu.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[以电影之眼看CSS3动画（一）]]></title>
    <link href="http://aotu.io/notes/2015/11/23/css3-animation-to-movie-part_1/"/>
    <id>http://aotu.io/notes/2015/11/23/css3-animation-to-movie-part_1/</id>
    <published>2015-11-22T17:27:00.000Z</published>
    <updated>2015-11-23T02:20:42.000Z</updated>
    <content type="html"><![CDATA[<h1 id="以电影之眼看CSS3动画（一）">以电影之眼看CSS3动画（一）</h1><hr>
<pre><code>注：此文非干货聚集地，来找干货的对不住了。
</code></pre><p><a href="http://isux.tencent.com/css3/index.html" target="_blank" rel="external">CSS3动画</a>的变形基础（transform）包含4种变形方式（translate、rotate、scale、skew），同时还可设置2D、3D、变形原点（transform-origin）、透视（perspective）、透视原点（perspective-origin）等等特性；动画时间频率包含9种基本模式（ease、linear、ease-in、ease-out、ease-in-out、step-start、step-end、steps），甚至还可以使用cubic-bezier写出任何你想要的模式；再加上动画持续时间（animation-duration）等设定，各种排列组合，CSS3动画简直拥有了整个世界！</p>
<p><img src="/img/post/2015-11-22-css3-animation-to-movie/1-1_trandition_animation.png" alt="trandition_animation"></p>
<ul>
<li>图片来源《动画的时间掌握》</li>
</ul>
<p>根据<a href="http://zh.wikipedia.org/wiki/%E5%8A%A8%E7%94%BB" target="_blank" rel="external">维基</a>的释义，动画是指由许多帧静止的画面，以一定的速度（如每秒16张）连续播放时，肉眼因视觉残象产生错觉，而误以为画面活动的作品（gif图片正是运用这种原理）。因此最初的动画是通过几张快速翻动的连续画面制作而成，而后经历了电影摄影技术的出现、电脑科技的进步，逐渐转向数字化。</p>
<p><img src="/img/post/2015-11-22-css3-animation-to-movie/1-2_bouncing_ball.gif" alt="bouncing_ball"><br><img src="/img/post/2015-11-22-css3-animation-to-movie/1-3_boucing_ball_frames.png" alt="boucing_ball_frames"></p>
<ul>
<li>将gif拖入PS之后打开时间轴窗口即可看到每一帧的画面</li>
</ul>
<p>无论是2D还是3D动画，关键帧，正如其名，是动画制作中最关键的部分，同时也是最难把握的部分。曾经有位设计师告诉我，在大学的第一节flash课的课后作业，老师要求大家上交一份小球动画，包含气球、石头球与皮球，并告诉大家，以相同的外观表现出不同的质感是在考验你对关键帧的悟性，而这一个作业就能体现你是否适合学习动画。</p>
<p><img src="/img/post/2015-11-22-css3-animation-to-movie/1-4_quality_of_ball.png" alt="quality_of_ball"></p>
<blockquote>
<p>A 需要很大的力才能使一个炮弹移动。一旦它移动了，同样需要很大的力才能阻挡它前进。B 一只汽球只需要很小的力去移动它，但空气阻力使它很快停止动作。这两个例子都画了动作分格线，可以看出在银幕上表现物体的轻重，取决于对它们动作的时间掌握。（图片来源：《动画的时间掌握》）</p>
</blockquote>
<p>在<a href="http://cghappening.blogspot.com/2011/02/blog-post_23.html" target="_blank" rel="external">《動畫製作流程介紹》</a>提供的视频中可以看到关键帧在动画制作中所起的地基般的作用。</p>
<p><img src="/img/post/2015-11-22-css3-animation-to-movie/1-5_story_board_of_Monster_Inc.gif" alt="story_board_of_Monster_Inc"></p>
<ul>
<li>画面上方的手绘图即为[怪物公司]的关键帧</li>
</ul>
<p>与关键帧紧密关联的即为时间轴（或摄制表），时间轴是补齐中间帧不可或缺的一项，在传统动画制作中，导演就是通过制定时间轴来掌控整部动画的节奏。</p>
<p><img src="/img/post/2015-11-22-css3-animation-to-movie/1-6_continuity.jpg" alt="continuity"></p>
<ul>
<li>摄制表（图片来源：《动画的时间掌握》）</li>
</ul>
<p>在CSS3中，@keyframes正是动画的关键帧容器。@keyframes中包含的包括transform在内的元素形态设定构成了关键帧的画面。@keyframes中的百分比即为时间轴的体现。中间帧则由浏览器自动完成（就像flash中的补全动画）。</p>
<p><img src="/img/post/2015-11-22-css3-animation-to-movie/1-7_css3_animation.png" alt="css3_animation"></p>
<ul>
<li>一个简单的动画关键帧示例</li>
</ul>
<p>现在我们知道了CSS3动画的结构与传统动画之间的关系，重点来了， CSS3动画可以做出一部动画电影吗？欲知详情，且听下回分解。</p>
<h2 id="参考资料：">参考资料：</h2><ul>
<li><a href="http://www.amazon.cn/%E5%8A%A8%E7%94%BB%E7%9A%84%E6%97%B6%E9%97%B4%E6%8E%8C%E6%8F%A1-%E5%93%88%E7%BD%97%E5%BE%B7%E2%80%A2%E5%A8%81%E7%89%B9%E5%85%8B/dp/B0094N5III/ref=sr_1_1?ie=UTF8&amp;qid=1420369719&amp;sr=8-1&amp;keywords=%E5%8A%A8%E7%94%BB%E7%9A%84%E6%97%B6%E9%97%B4%E6%8E%8C%E6%8F%A1" target="_blank" rel="external">《动画的时间掌握（修订版）》</a>[英]哈罗德•威特克；[英]约翰•哈拉斯；[美]汤姆•赛图</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="以电影之眼看CSS3动画（一）">以电影之眼看CSS3动画（一）</h1><hr>
<pre><code>注：此文非干货聚集地，来找干货的对不住了。
</code></pre><p><a href="http://isux.tencent.com/css3/ind]]>
    </summary>
    
      <category term="Animation" scheme="http://aotu.io/tags/Animation/"/>
    
      <category term="CSS3" scheme="http://aotu.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SVG I Know]]></title>
    <link href="http://aotu.io/notes/2015/11/20/svg-I-know/"/>
    <id>http://aotu.io/notes/2015/11/20/svg-I-know/</id>
    <published>2015-11-20T11:30:45.000Z</published>
    <updated>2015-11-23T10:58:13.000Z</updated>
    <content type="html"><![CDATA[<h2 id="第一章：SVG入门篇">第一章：SVG入门篇</h2><h3 id="SVG简介">SVG简介</h3><p>SVG即Scalable Vector Graphics可缩放矢量图形，使用XML格式定义图形。<br>优点：</p>
<ul>
<li>SVG与其他图片格式相比：主要优势在于可缩放的同时不会影响图片的质量。</li>
<li>与flash相比 ：SVG 最大的优势是与其他标准（比如 XSL 和 DOM）相兼容。而 Flash 则是未开源的私有技术。</li>
</ul>
<h3 id="SVG_in_HTML常用方法">SVG in HTML常用方法</h3><h4 id="使用&lt;img&gt;元素来嵌入SVG图像">使用&lt;img&gt;元素来嵌入SVG图像</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://www.w3school.com.cn/svg/rect1.svg"</span>  <span class="attribute">width</span>=<span class="value">"300"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="将SVG图像作为背景图像嵌入">将SVG图像作为背景图像嵌入</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: url('http://www.w3school.com.cn/svg/rect1.svg') no-repeat;</span><br></pre></td></tr></table></figure>
<h4 id="使用svg元素，通过代码将SVG图像嵌入到HTML代码中">使用svg元素，通过代码将SVG图像嵌入到HTML代码中</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">svg</span> <span class="attribute">width</span>=<span class="value">"100%"</span> <span class="attribute">height</span>=<span class="value">"100%"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="title">rect</span> <span class="attribute">x</span>=<span class="value">"20"</span> <span class="attribute">y</span>=<span class="value">"20"</span> <span class="attribute">width</span>=<span class="value">"250"</span> <span class="attribute">height</span>=<span class="value">"250"</span></span><br><span class="line"><span class="attribute">style</span>=<span class="value">"fill:#fecdddd;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="title">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="svg_sprites">svg sprites</h3><p>svg sprites类似于css sprites，将各个svg合并在一起。<br>最主要的优点就是能减少页面的加载时间，优化开发流程，以及保持页面中图片元素的一致性。<br>实践中我们可以把整块的svg放在head头部， 因此可以在一处地方更新svg即可，而不是让svg的代码块散落在文档的各个地方。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">title</span>&gt;</span>svg<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="title">svg</span> <span class="attribute">version</span>=<span class="value">"1.1"</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.w3.org/2000/svg"</span> <span class="attribute">xmlns:xlink</span>=<span class="value">"http://www.w3.org/1999/xlink"</span> <span class="attribute">width</span>=<span class="value">"32"</span> <span class="attribute">height</span>=<span class="value">"158"</span> <span class="attribute">viewBox</span>=<span class="value">"0 0 32 158"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- SVG等省略  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">svg</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在这里<a href="https://icomoon.io/app/#/select" target="_blank" rel="external">https://icomoon.io/app/#/select</a>可以设置sprites，可以自己导入svg。</p>
<p class="user_img"><img src="/img/post/svgSprite.jpg" alt="svgSprite"></p>
<h3 id="symbol+use">symbol+use</h3><p>在head头部的svg中使用symbol元素，并使用id属性。其中symbol类似flash中的元件，可多次使用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">svg</span> <span class="attribute">id</span>=<span class="value">"icon-truck"</span> <span class="attribute">width</span>=<span class="value">"32"</span> <span class="attribute">height</span>=<span class="value">"32"</span> <span class="attribute">viewBox</span>=<span class="value">"0 0 32 32"</span> <span class="attribute">x</span>=<span class="value">"0"</span> <span class="attribute">y</span>=<span class="value">"126"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">symbol</span> <span class="attribute">id</span>=<span class="value">"truck"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">path</span> <span class="attribute">fill</span>=<span class="value">"#fff"</span> <span class="attribute">d</span>=<span class="value">"M24.832 11.445c-0.186-0.278-0.498-0.445-0.832-0.445h-1c-0.553 0-1 0.447-1 1v6c0 0.553 0.447 1 1 1h4c0.553 0 1-0.447 1-1v-1.5c0-0.197-0.059-0.391-0.168-0.555l-3-4.5zM27 18h-4v-6h1l3 4.5v1.5zM31.496 15.336l-4-6c-0.558-0.837-1.492-1.336-2.496-1.336h-4v-2c0-1.654-1.346-3-3-3h-15c-1.654 0-3 1.346-3 3v11c0 1.654 1.346 3 3 3v0 3c0 1.654 1.346 3 3 3h1.142c0.447 1.721 2 3 3.859 3 1.857 0 3.41-1.279 3.857-3h5.282c0.447 1.721 2 3 3.859 3 1.857 0 3.41-1.279 3.857-3h1.144c1.654 0 3-1.346 3-3v-6c0-0.594-0.174-1.17-0.504-1.664zM3 18c-0.552 0-1-0.447-1-1v-11c0-0.553 0.448-1 1-1h15c0.553 0 1 0.447 1 1v11c0 0.553-0.447 1-1 1h-15zM11.001 27c-1.105 0-2-0.896-2-2s0.895-2 2-2c1.104 0 2 0.896 2 2s-0.897 2-2 2zM24 27c-1.105 0-2-0.896-2-2s0.895-2 2-2c1.104 0 2 0.896 2 2s-0.896 2-2 2zM30 23c0 0.553-0.447 1-1 1h-1.143c-0.447-1.721-2-3-3.857-3-1.859 0-3.412 1.279-3.859 3h-5.282c-0.447-1.721-2-3-3.857-3-1.859 0-3.412 1.279-3.859 3h-1.143c-0.552 0-1-0.447-1-1v-3h13c1.654 0 3-1.346 3-3v-7h4c0.334 0 0.646 0.167 0.832 0.445l4 6c0.109 0.164 0.168 0.358 0.168 0.555v6z"</span>&gt;</span><span class="tag">&lt;/<span class="title">path</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">symbol</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后在需要用到这个元件的地方使用use元素引用元件。其中xlink:href=”#truck”相当于元件的链接，通过引用元件的id来实现。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">use</span> <span class="attribute">xlink:href</span>=<span class="value">"#truck"</span> <span class="attribute">x</span>=<span class="value">"0"</span> <span class="attribute">y</span>=<span class="value">"0"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="兼容性">兼容性</h3><p class="user_img"><img src="/img/post/svgImage1.png" alt="svg兼容性"></p>
<p>兼容性详细情况请点击 <a href="http://caniuse.com/#search=svg" target="_blank" rel="external">此处</a></p>
<h3 id="总结思考">总结思考</h3><p>一般在html中使用SVG有三种方法：使用&lt;img&gt;元素来嵌入SVG图像；将SVG图像作为背景图像嵌入；使用&lt;svg&gt;元素，通过代码将SVG图像嵌入到HTML代码中。<br>使用过程中，可通过svg sprites提高性能，通过symbol以及use元素提高文档的可维护性等。</p>
<h2 id="第二章：SVG形状">第二章：SVG形状</h2><h3 id="矩形_&lt;rect&gt;">矩形 &lt;rect&gt;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">rect</span> <span class="attribute">x</span>=<span class="value">"20"</span> <span class="attribute">y</span>=<span class="value">"20"</span> <span class="attribute">rx</span>=<span class="value">"20"</span> <span class="attribute">ry</span>=<span class="value">"20"</span> <span class="attribute">width</span>=<span class="value">"250"</span> <span class="attribute">height</span>=<span class="value">"100"</span> <span class="attribute">style</span>=<span class="value">"fill:red;stroke:black; stroke-width:5;opacity:0.5"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>解释：x为x坐标，y为y坐标；width 和 height 分别为形状的高度和宽度；rx 和 ry 属性可使矩形产生圆角。<br>另外，下面三个属性是文章后面会用到的，之后不会过多讲述：</p>
<ul>
<li>fill 属性定义形状的填充颜色</li>
<li>stroke 属性定义图形边框的颜色</li>
<li>stroke-width 属性定义形状边框的宽度</li>
</ul>
<h3 id="圆形_&lt;circle&gt;">圆形 &lt;circle&gt;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">circle</span> <span class="attribute">cx</span>=<span class="value">"100"</span> <span class="attribute">cy</span>=<span class="value">"50"</span> <span class="attribute">r</span>=<span class="value">"40"</span> <span class="attribute">stroke</span>=<span class="value">"black"</span> <span class="attribute">stroke-width</span>=<span class="value">"2"</span> <span class="attribute">fill</span>=<span class="value">"red"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p> 解释：cx 和 cy分别为圆点的 x 和 y 坐标；r为半径。</p>
<h3 id="椭圆&lt;ellipse&gt;">椭圆&lt;ellipse&gt;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ellipse</span> <span class="attribute">cx</span>=<span class="value">"300"</span> <span class="attribute">cy</span>=<span class="value">"150"</span> <span class="attribute">rx</span>=<span class="value">"200"</span> <span class="attribute">ry</span>=<span class="value">"80"</span> <span class="attribute">style</span>=<span class="value">"fill:rgb(200,100,50); stroke:rgb(0,0,100);stroke-width:2"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>解释：cx 圆点的 x 坐标，cy 圆点的 y 坐标；rx 水平半径，ry 垂直半径。</p>
<h3 id="线&lt;line&gt;">线&lt;line&gt;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">line</span> <span class="attribute">x1</span>=<span class="value">"0"</span> <span class="attribute">y1</span>=<span class="value">"0"</span> <span class="attribute">x2</span>=<span class="value">"300"</span> <span class="attribute">y2</span>=<span class="value">"300"</span> <span class="attribute">style</span>=<span class="value">"stroke:rgb(99,99,99);stroke-width:2"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p> 解释：(x1,y1)为线条的开始坐标；(x2,y2)为线条的结束坐标。</p>
<h3 id="折线&lt;polyline&gt;">折线&lt;polyline&gt;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">polyline</span> <span class="attribute">points</span>=<span class="value">"0,0 0,20 20,20 20,40 40,40 40,60"</span> <span class="attribute">style</span>=<span class="value">"fill:white;stroke:red;stroke-width:2"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p> 解释：points 属性定义多边形每个角的 x 和 y 坐标。为了可读性，建议x与y坐标用逗号分开，每个角之间的坐标用空格分开。</p>
<h3 id="多边形&lt;polygon&gt;">多边形&lt;polygon&gt;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">polygon</span> <span class="attribute">points</span>=<span class="value">"220,100 300,210 170,250"</span> <span class="attribute">style</span>=<span class="value">"fill:#cccccc; stroke:#000000;stroke-width:1"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p> 解释：points 属性定义多边形每个角的 x 和 y 坐标。</p>
<h3 id="路径&lt;path&gt;">路径&lt;path&gt;</h3><p>直线指令：<br>M = moveto<br>L = lineto<br>H = horizontal lineto<br>V = vertical lineto<br>Z = closepath<br>注释：以上所有命令均允许小写字母。大写表示绝对定位，小写表示相对定位。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">path</span> <span class="attribute">d</span>=<span class="value">"M250 150 L150 350 L350 350 Z"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>解释：该路径开始于位置 250 150，到达位置 150 350，然后从那里开始到 350 350，最后在 250 150 关闭路径。<br>由于绘制路径的复杂性，建议使用 SVG 编辑器来创建复杂的图形。</p>
<h4 id="svg的贝塞尔曲线">svg的贝塞尔曲线</h4><p>贝塞尔曲线指令：<br>C = curveto<br>S = smooth curveto<br>Q = quadratic Belzier curve<br>T = smooth quadratic Belzier curveto<br>贝塞尔曲线控制小工具<a href="http://dayu.pw/svgcontrol/" target="_blank" rel="external">http://dayu.pw/svgcontrol/</a>，操控多次可加深对贝塞尔曲线的理解。</p>
<p class="user_img"><img src="/img/post/svgImage2.png" alt="三次贝塞尔曲线控制"></p>
<p class="user_img"><img src="/img/post/svgImage3.png" alt="三次贝塞尔曲线控制"></p>
<p>CSQT比较难记，联想记忆法“厕所切图(CSQT)”就比较容易记住了。<br>厕所是3D空间，所以CS是三次曲线噢，切图是平面图，所以是二次曲线，很好记。</p>
<h5 id="C三次贝塞尔曲线">C三次贝塞尔曲线</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C x1 y1, x2 y2, x y (or c dx1 dy1, dx2 dy2, dx dy)</span><br></pre></td></tr></table></figure>
<p>最后一个坐标(x,y)表示的是曲线的终点，另外两个坐标是控制点，(x1,y1)是起点的控制点，(x2,y2)是终点的控制点。小写指令c表示相对坐标。</p>
<h5 id="S光滑三次贝塞尔曲线">S光滑三次贝塞尔曲线</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S x2 y2, x y (or s dx2 dy2, dx dy)</span><br></pre></td></tr></table></figure>
<p>之所以S命令没有x1 y1，是因为S命令跟在C命令后，x1 y1默认是C命令的第二个控制点的对称点，如下图蓝色线条所示。<br></p><p class="user_img"><img src="/img/post/svgImage4.png" alt="光滑三次贝塞尔曲线控"></p><p></p>
<p>如果前面没有C命令，即S命令单独使用时，S命令画出来的是二次贝塞尔曲线，因为x1 y1和x2 y2默认是同一个控制点了。</p>
<h5 id="Q二次贝塞尔曲线">Q二次贝塞尔曲线</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Q x1 y1, x y (or q dx1 dy1, dx dy)</span><br></pre></td></tr></table></figure>
<h5 id="T光滑二次贝塞尔曲线">T光滑二次贝塞尔曲线</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T x y (or t dx dy)</span><br></pre></td></tr></table></figure>
<p>T命令的控制点默认是前面C命令的控制点的对称点。<br></p><p class="user_img"><img src="/img/post/svgImage5.png" alt="光滑二次贝塞尔曲线控制"></p><p></p>
<p>如果T命令前面没有C命令，即T命令单独使用时，T命令画出来的是直线。</p>
<h3 id="总结思考-1">总结思考</h3><p>路径比基本形状更强大、更灵活。使用路径绘制复杂图形比较麻烦，但是使用它们来绘制图形的效果大多数时候很赞，一般其他基本图形是做不来的。</p>
<h2 id="第三章：SVG动画">第三章：SVG动画</h2><hr>
<h3 id="svg路径动画">svg路径动画</h3><p>DEMO:<br></p><p class="user_img"><img src="/img/post/svgTruck.gif" alt="路径动画"></p><p></p>
<p>g元素是用于把相关元素进行组合的容器元素。animateMotion使元素沿着动作路径移动，且该路径不可见，path定义的是可见的路径。rotate=”auto”使元素移动得更加自然，会随着路径旋转一定的角度。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">svg</span> <span class="attribute">width</span>=<span class="value">"1500"</span> <span class="attribute">height</span>=<span class="value">"150"</span> <span class="attribute">class</span>=<span class="value">"truck"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">g</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">use</span> <span class="attribute">xmlns:xlink</span>=<span class="value">"http://www.w3.org/1999/xlink"</span> <span class="attribute">xlink:href</span>=<span class="value">"#truck"</span> <span class="attribute">x</span>=<span class="value">"0"</span> <span class="attribute">y</span>=<span class="value">"0"</span>&gt;</span><span class="tag">&lt;/<span class="title">use</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">animateMotion</span> <span class="attribute">path</span>=<span class="value">"M0 0 C135.5 68 463.5 -8 700 29 S1000 -20 1940,70"</span> <span class="attribute">begin</span>=<span class="value">"-3s"</span> <span class="attribute">dur</span>=<span class="value">"10s"</span> <span class="attribute">rotate</span>=<span class="value">"auto"</span> <span class="attribute">repeatCount</span>=<span class="value">"indefinite"</span>&gt;</span><span class="tag">&lt;/<span class="title">animateMotion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">g</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">g</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">use</span> <span class="attribute">xmlns:xlink</span>=<span class="value">"http://www.w3.org/1999/xlink"</span> <span class="attribute">xlink:href</span>=<span class="value">"#truck"</span> <span class="attribute">x</span>=<span class="value">"0"</span> <span class="attribute">y</span>=<span class="value">"0"</span>&gt;</span><span class="tag">&lt;/<span class="title">use</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">animateMotion</span> <span class="attribute">path</span>=<span class="value">"M0 0 C135.5 68 463.5 -8 700 29 S1000 -20 1940,70"</span> <span class="attribute">begin</span>=<span class="value">"0s"</span> <span class="attribute">dur</span>=<span class="value">"10s"</span> <span class="attribute">rotate</span>=<span class="value">"auto"</span> <span class="attribute">repeatCount</span>=<span class="value">"indefinite"</span>&gt;</span><span class="tag">&lt;/<span class="title">animateMotion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">g</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="title">path</span> <span class="attribute">d</span>=<span class="value">"M0 30 C135.5 98 463.5 22 700 59 S1000 10 1940,100"</span> <span class="attribute">stroke</span>=<span class="value">"#000"</span> <span class="attribute">stroke-width</span>=<span class="value">"2"</span> <span class="attribute">fill</span>=<span class="value">"none"</span> <span class="attribute">x</span>=<span class="value">"-1000"</span> <span class="attribute">y</span>=<span class="value">"-1000"</span> <span class="attribute">class</span>=<span class="value">"truck_path"</span>&gt;</span><span class="tag">&lt;/<span class="title">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/Newcandy/svg/blob/master/path.html" target="_blank" rel="external">点击查看全部代码</a></p>
<h3 id="svg路径描边动画">svg路径描边动画</h3><p>DEMO:<br></p><p class="user_img"><img src="/img/post/svgPhone.gif" alt="路径描边动画"></p><p></p>
<p>在path等元素上必须使用stoke属性，否则动画不执行。stroke 表示描边颜色；stroke-width 表示描边的粗细；<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">svg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">symbol</span> <span class="attribute">id</span>=<span class="value">"phone"</span> <span class="attribute">viewBox</span>=<span class="value">"0 0 1024 1024"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">path</span> <span class="attribute">fill</span>=<span class="value">"none"</span> <span class="attribute">stroke</span>=<span class="value">"#000"</span> <span class="attribute">stroke-width</span>=<span class="value">"3"</span> <span class="attribute">d</span>=<span class="value">"M768 0h-512c-53.056 0-96 42.976-96 96v832c0 53.056 42.976 96 96 96h512c52.992 0 96-43.008 96-96v-832c0-53.056-43.008-96-96-96zM800 928c0 17.632-14.368 32-32 32h-512c-17.664 0-32-14.304-32-32v-64.128h576v64.128zM800 831.872h-576v-639.872h576v639.872zM800 160h-576v-64c0-17.664 14.336-32 32-32h512c17.632 0 32 14.336 32 32v64zM576 112c0 8.832-7.2 16-16 16h-96c-8.864 0-16-7.168-16-16v0c0-8.864 7.136-16 16-16h96c8.8 0 16 7.136 16 16v0zM544 911.872c0 8.8-7.2 16-16 16h-32c-8.832 0-16-7.2-16-16v0c0-8.864 7.168-16 16-16h32c8.8 0 16 7.136 16 16v0z"</span>&gt;</span><span class="tag">&lt;/<span class="title">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">symbol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>使用CSS3 animation实现，因为内联的svg本身就是Html元素，可以通过CSS3来控制颜色等属性。<br>stroke-dasharray 表示虚线描边；stroke-dashoffset 表示虚线的起始偏移。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.device</span> <span class="rules">&#123; <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;<span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">43%</span></span></span>;<span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">50%</span></span></span>;<span class="rule"><span class="attribute">margin</span>:<span class="value"> -<span class="number">200px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">200px</span></span></span>;<span class="rule"><span class="attribute">stroke-dasharray</span>:<span class="value"> <span class="number">4000</span></span></span>;<span class="rule"><span class="attribute">stroke-dashoffset</span>:<span class="value"> <span class="number">4000</span></span></span>;<span class="rule"><span class="attribute">-webkit-animation</span>:<span class="value"> dash <span class="number">2s</span> infinite</span></span>;<span class="rule"><span class="attribute">animation</span>:<span class="value"> dash <span class="number">2s</span> infinite</span></span>; &#125;</span></span><br><span class="line">    <span class="at_rule">@<span class="keyword">-webkit-keyframes</span> dash </span>&#123;</span><br><span class="line">      100% <span class="rules">&#123; <span class="rule"><span class="attribute">stroke-dashoffset</span>:<span class="value"> <span class="number">0</span></span></span>; &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="at_rule">@<span class="keyword">keyframes</span> dash </span>&#123;</span><br><span class="line">      100% <span class="rules">&#123; <span class="rule"><span class="attribute">stroke-dashoffset</span>:<span class="value"> <span class="number">0</span></span></span>; &#125;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p> <a href="https://github.com/Newcandy/svg/blob/master/stroke.html" target="_blank" rel="external">点击查看全部代码</a></p>
<h3 id="css中的clip-path">css中的clip-path</h3><p> clip-path按照路径内部的尺寸进行裁剪。只有路径内的内容可见。使用方法如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.element</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">clip-path</span>:<span class="value"> <span class="function">polygon</span>(...)</span></span>; <span class="comment">/* 或者其他的图形函数 */</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 其他图形函数语法 --&gt;</span></span><br><span class="line">circle: circle(radius at x-axis y-axis)</span><br><span class="line">ellipse: ellipse(x-rad y-rad at x-axis y-axis)</span><br><span class="line">polygon: polygon(x-axis y-axis, x-axis y-axis, … )</span><br><span class="line">inset: inset(top right bottom left round top-radius right-radius bottom-radius left-radius)</span><br></pre></td></tr></table></figure>
<p>DEMO1:<br></p><p class="user_img"><img src="/img/post/svgBreakup.gif" alt="clippath"></p><p></p>
<p>利用伪元素:before和:after实现相同大小相同位置的文字，使用clip-path分别裁剪文字：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.txt</span> <span class="rules">&#123; <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;<span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;<span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">70px</span></span></span>;<span class="rule"><span class="attribute">text-transform</span>:<span class="value"> uppercase</span></span>;<span class="rule"><span class="attribute">color</span>:<span class="value"> transparent</span></span>; &#125;</span></span><br><span class="line"><span class="comment">/* 此处省略代码 */</span>	</span><br><span class="line"><span class="class">.txt</span><span class="pseudo">:before</span> <span class="rules">&#123; <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">0</span> <span class="number">0</span>,<span class="number">100%</span> <span class="number">0</span>,<span class="number">100%</span> <span class="number">100%</span>)</span></span>;<span class="rule"><span class="attribute">clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">0</span> <span class="number">0</span>,<span class="number">100%</span> <span class="number">0</span>,<span class="number">100%</span> <span class="number">100%</span>)</span></span>; &#125;</span></span><br><span class="line"><span class="class">.txt</span><span class="pseudo">:after</span> <span class="rules">&#123; <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">0</span> <span class="number">0</span>,<span class="number">0</span> <span class="number">100%</span>,<span class="number">100%</span> <span class="number">100%</span>)</span></span>;<span class="rule"><span class="attribute">clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">0</span> <span class="number">0</span>,<span class="number">0</span> <span class="number">100%</span>,<span class="number">100%</span> <span class="number">100%</span>)</span></span>; &#125;</span></span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/Newcandy/svg/blob/master/clip-path/text.html" target="_blank" rel="external">点击查看全部代码</a></p>
<p>DEMO2：<br></p><p class="user_img"><img src="/img/post/svgLine.gif" alt="clippath"></p><p></p>
<p>如果结合clip-path和keyframes动画，可实现相关元素按照我们的路径逐步出现的效果。clip-path可通过此工具<a href="http://www.bennettfeely.com/clippy/实现复杂的路径。" target="_blank" rel="external">http://www.bennettfeely.com/clippy/实现复杂的路径。</a><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class">.line</span> <span class="rules">&#123; <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;<span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;<span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">28px</span></span></span>;<span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">34px</span></span></span>;<span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url</span>(line.png) <span class="number">0</span> <span class="number">0</span> no-repeat</span></span>;<span class="rule"><span class="attribute">-webkit-animation</span>:<span class="value"> moveLine .<span class="number">8s</span> ease infinite</span></span>;<span class="rule"><span class="attribute">animation</span>:<span class="value"> moveLine .<span class="number">8s</span> ease infinite</span></span>; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="at_rule">@<span class="keyword">-webkit-keyframes</span> moveLine </span>&#123;</span><br><span class="line">  0% <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">0</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">100%</span>)</span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line">  25% <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">0</span> <span class="number">82%</span>, <span class="number">100%</span> <span class="number">81%</span>, <span class="number">100%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">100%</span>)</span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line">  50% <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">20%</span> <span class="number">0%</span>, <span class="number">80%</span> <span class="number">0%</span>, <span class="number">73%</span> <span class="number">47%</span>, <span class="number">74%</span> <span class="number">64%</span>, <span class="number">99%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">100%</span>, <span class="number">56%</span> <span class="number">77%</span>, <span class="number">64%</span> <span class="number">58%</span>)</span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line">  60% <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">50%</span> <span class="number">0%</span>, <span class="number">72%</span> <span class="number">48%</span>, <span class="number">75%</span> <span class="number">70%</span>, <span class="number">100%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">100%</span>, <span class="number">55%</span> <span class="number">78%</span>, <span class="number">5%</span> <span class="number">68%</span>)</span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line">  75% <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">28%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">34%</span>, <span class="number">79%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">0</span>)</span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line">  100% <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">100%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">0</span>)</span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/Newcandy/svg/blob/master/clip-path/line.html" target="_blank" rel="external">点击查看全部代码</a></p>
<h3 id="总结思考-2">总结思考</h3><p>本章主要介绍svg路径动画，svg路径描边动画以及css中的clip-path，从中我们也发现了路径的强大之处，如若能在项目中灵活使用，无非给动画添加更生动的效果。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="第一章：SVG入门篇">第一章：SVG入门篇</h2><h3 id="SVG简介">SVG简介</h3><p>SVG即Scalable Vector Graphics可缩放矢量图形，使用XML格式定义图形。<br>优点：</p>
<ul>
<li>SVG与其他图片]]>
    </summary>
    
      <category term="svg" scheme="http://aotu.io/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[凹凸实验室博客V1.0.0发布]]></title>
    <link href="http://aotu.io/notes/2015/11/20/aotu-blog-v1/"/>
    <id>http://aotu.io/notes/2015/11/20/aotu-blog-v1/</id>
    <published>2015-11-20T00:24:35.000Z</published>
    <updated>2015-11-24T11:25:13.000Z</updated>
    <content type="html"><![CDATA[<p>筹备了两周多，凹凸实验室博客 V1.0.0 正式发布啦，欢迎同学们体验并提供建议。<br>它是一个托管于Github的静态博客，基于HEXO搭建，主题的定做参考自<a href="http://html5up.net/future-imperfect" target="_blank" rel="external">future-imperfect</a>的扁平简约，暂且命名为<code>o2</code>。主题单独开源于 <a href="o2team/hexo-theme-o2">hexo-theme-o2</a>，有兴趣的朋友可以自由下载使用。</p>
<a id="more"></a>
<h2 id="博客的一些特性">博客的一些特性</h2><ol>
<li><p>使用github头像</p>
<p>记得将你们在github的头像更新到最帅，将你github的用户名在文章内头部填好即可！</p>
</li>
<li><p><a href="https://npmjs.org/package/hexo-wordcount" target="_blank" rel="external">hexo-wordcount</a> 显示博文字数</p>
</li>
<li><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="external">不蒜子</a> 统计博文的pv</li>
<li>每日一句英文警句</li>
<li><a href="http://duoshuo.com" target="_blank" rel="external">多说</a>评论</li>
</ol>
<h2 id="使用指引">使用指引</h2><ol>
<li><p>安装hexo</p>
 <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-<span class="keyword">cli</span> -<span class="keyword">g</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将o2team.github.io的源码拉到本地</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github<span class="class">.com</span>:o2team/o2team<span class="class">.github</span><span class="class">.io</span><span class="class">.git</span> o2team</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化子模块(submodules)</p>
 <figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> o2team</span><br><span class="line">git submodule init</span><br><span class="line">git submodule <span class="keyword">update</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换至themes/o2目录，签出master分支</span></span><br><span class="line"><span class="keyword">cd</span> ../themes/o2</span><br><span class="line">git checkout master</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装nodejs包</p>
 <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换回根目录下</span></span><br><span class="line">cd ..<span class="regexp">/../</span></span><br><span class="line"><span class="built_in">npm</span> install</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行<code>hexo s --watch</code></p>
<p> 运行上述命令后，浏览器打开 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 即可本地访问我们的网站</p>
</li>
</ol>
<h2 id="创建文章">创建文章</h2><p>有两种方法创建文章，可任选其一：</p>
<blockquote>
<p>注意：文件名不要出现中文!!!</p>
</blockquote>
<ol>
<li><p>使用<code>hexo new</code> 命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>拷贝现有的文章进行修改</p>
<p>hexo使用markdown来编辑文章，在source目录下，拷贝任意md文件进行创建新的文章。具体可参考下hexo的官方说明</p>
</li>
</ol>
<h2 id="文章规范">文章规范</h2><ol>
<li>使用markdown写博文 </li>
<li><p>博文图片统一位置：<code>source/img/post/</code><br> 在博客内容中可以使用 <code>pimg</code> 自定义标签来引用图片。注意别覆盖了别人的图片!!!<br> 其语法格式为：<br> <code>{% pimg imageName [alt text] [JSONImageAttibutes] %}</code><br> 例如：<br> <code>{% pimg post-aotu.jpg "空格请用%20来区分" "{"title":"hello","class":"test_img"}" %}</code><br> 需要注意的是：<code>pimg</code> 利用空格来划分字段属性，如果一个属性的值需要空格，请将空格用<code>%20</code>代替!!!    </p>
</li>
<li><p>为了保证博客整体美观，每个文章需要一张配图(大小：840x340)</p>
</li>
<li><p>指明文章的副标题、作者信息、封面图片地址</p>
 <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">subtitle</span>: <span class="string">"凹凸实验室博客是一个托管于Github的静态博客，基于HEXO搭建..."</span></span><br><span class="line"><span class="attribute">date</span>: <span class="number">2015</span>-<span class="number">11</span>-<span class="number">20</span> <span class="number">00</span>:<span class="number">24</span>:<span class="number">35</span></span><br><span class="line"><span class="attribute">cover</span>: <span class="string">"封面图片地址"</span></span><br><span class="line"><span class="attribute">tags</span>:</span><br><span class="line">- Hexo</span><br><span class="line"><span class="attribute">author</span>:</span><br><span class="line">    <span class="attribute">nick</span>: LV主唱大人</span><br><span class="line">    <span class="attribute">github_name</span>: mamboer</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用<code>&lt;!-- more --&gt;</code>设置文章的摘要</p>
<p> 示例：</p>
 <figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">title: 文章标题</span><br><span class="line">---</span><br><span class="line">这部分是文章摘要，这部分是文章摘要。在hexo模版里可通过 </span><span class="template_tag">&#123;% raw %&#125;</span><span class="xml"></span><span class="variable">&#123;&#123; post.excerpt &#125;&#125;</span><span class="xml"></span><span class="template_tag">&#123;% endraw %&#125;</span><span class="xml"> 来引用。</span><br><span class="line"><span class="comment">&lt;!-- more --&gt;</span> </span><br><span class="line">这里是文章的剩余部分。在hexo模版里可通过</span><span class="template_tag">&#123;% raw %&#125;</span><span class="xml"></span><span class="variable">&#123;&#123; post.more &#125;&#125;</span><span class="xml"></span><span class="template_tag">&#123;% endraw %&#125;</span><span class="xml"> 来引用。</span></span><br></pre></td></tr></table></figure>
<p> 实际使用请参考<a href="!--￼9--">本文</a>。</p>
</li>
</ol>
<h2 id="关于博客的发布">关于博客的发布</h2><p>为了便于统一维护，博客的发布由<code>LV</code>负责。同学们写好博文并在本地预览OK后直接提交Github即可。  </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>筹备了两周多，凹凸实验室博客 V1.0.0 正式发布啦，欢迎同学们体验并提供建议。<br>它是一个托管于Github的静态博客，基于HEXO搭建，主题的定做参考自<a href="http://html5up.net/future-imperfect">future-imperfect</a>的扁平简约，暂且命名为<code>o2</code>。主题单独开源于 <a href="o2team/hexo-theme-o2">hexo-theme-o2</a>，有兴趣的朋友可以自由下载使用。</p>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://aotu.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[101%还原]]></title>
    <link href="http://aotu.io/notes/2015/11/20/101-percent/"/>
    <id>http://aotu.io/notes/2015/11/20/101-percent/</id>
    <published>2015-11-19T21:39:14.000Z</published>
    <updated>2015-11-26T01:56:01.000Z</updated>
    <content type="html"><![CDATA[<p><em>100%还原设计稿，还原误差不超1像素</em> 是重构工程师入行的最基本要求，而在实际工作中，这100%是远远不够的。</p>
<p> 记得曾经带我的师傅说过一句话：</p>
<blockquote>
<p>重构工程师不应该满足100%还原设计稿，更应该去追求101%还原度。</p>
</blockquote>
<p>101%还原是重构工程师在还原设计稿的过程中，发挥自身的主观能动性，对设计稿进行修正或向产品、视觉、交互提出合理的建议，让最终还原出来的视觉设计稿更接近设计本意。</p>
<p>101%的还原可以归为两类，一类是<strong>对视觉稿的主动修正</strong>，不包括具有信息传达的内容；另一类是<strong>对视觉稿深入思考并提出合理建议</strong>，包括但不限于具有信息传达的内容。</p>
<h2 id="对视觉稿的主动修正">对视觉稿的主动修正</h2><p>视觉设计师有时候会比较忙，设计稿中可能会出现像素之间的误差而造成不对齐的情况，如下面的设计稿：</p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img1.jpg" alt="image"></p>
<p><em>（Retina 2X图）</em></p>
<p>很明显，视觉设计师原意是想让右则的按钮垂直居中对齐的，我们在还原的时候可以去微调边距让之对齐，得到下面的重构稿：</p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img2.jpg" alt="image"></p>
<p><em>（重构稿1X图）</em></p>
<p>可以看到，还原出来的设计稿虽然和原设计稿并没有100%吻合，但是出来的效果确实更符合垂直居中对齐的准则，更接近设计的本意，而且节省了沟通的成本。</p>
<p>有些同学许会问，在没有周知视觉设计师的情况下私下改动设计稿貌似有点不太尊重视觉设计师的工作吧?</p>
<p><strong>对视觉稿的主动修正有一个很重要的原则，就是在没有信发生息传达的情况下修正，所作的修正不能违背设计本意。</strong>拿刚才的例子来说，如果我个人不喜欢按钮的边角是方角的，就私下把方角还原成圆角，如下图：</p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img3.jpg" alt="image"></p>
<p>那就产生了还原稿与设计原稿之间的信息传达内容了，因为方角和圆角是两个不一样的设计风格，圆角按钮明显不是视觉设计师的设计本意，如果圆角按钮在视觉设计师完全不知情的情况下上了线，那就是真正的不尊重视觉设计师的工作了。</p>
<p>当然视觉设计师都希望自己输出的设计稿完美无缺，但一些客观因素（交接模块）或主观上的操作（工作太忙，拖动元素排版的时候手抖）难免会让设计稿存在一些像素级的误差，对视觉稿的主动修正，是和视觉设计师协作的一种默契，如果每一项这样的修正都要让视觉设计师重新去调整再生成新的PSD文件的话，沟通成本未免过高</p>
<h2 id="对视觉稿深入思考并提出合理建议">对视觉稿深入思考并提出合理建议</h2><p>我们先看一下下面的设计稿：</p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img4.jpg" alt="image"></p>
<p>从视觉稿来看，视觉设计师把“关注本店”、“关注公众号”和“联系卖家”这三项的按钮所占的区域作了等分处理，按钮里面的文案和icon水平居中</p>
<p>等分的排版，虽然个体之间的内容不一样会出现内容与分隔线边距不相等的情况，但是在按钮所占展示区域比例相等的情况下，三个按钮整体看上去是非常整齐的，排版逻辑很清晰：</p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img5.jpg" alt="image"></p>
<p>可以看出，让三个按钮在页面上的排版整体看起来是整齐的是设计师的设计本意，那么问题来了：</p>
<p>在还原设计稿中，我们通常会考虑到布局的扩展性，会考虑到不足三个按钮或者多于三个按钮的排版情况，如果按照等分的排版型去还原，按钮出现增减的话，就会出现下面的情况：</p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img6.jpg" alt="image"></p>
<p><em>（等分四个按钮）</em></p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img7.jpg" alt="image"></p>
<p><em>（等分：三个按钮）</em></p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img8.jpg" alt="image"></p>
<p><em>（等分：两个按钮）</em></p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img9.jpg" alt="image"></p>
<p><em>（等分：一个按钮）</em></p>
<p>可以看到，大于3个按钮的时候，文案的展示出现了问题，小于3个按钮的时候按钮的大小和文案与分隔线的间距就略显夸张了，特别是只有一个按钮的情况，几种情况的排版在视觉上变化都很大，而且视觉稿里是没有相应的展示的，那么这里面包含了排版之间的信息传达。</p>
<p><strong>在还原过程中，当发生信息传达的时候，任何疑问和建议都应该周知相关的负责人，这是101%还原中的基本原则</strong></p>
<p>把刚才上面的几种情况，写好demo向产品和视觉设计师展示，反馈并确认两个问题：</p>
<ul>
<li><p>按钮在不同的场景中最多展示的个数和最少展示的个数</p>
</li>
<li><p>如果按钮展示个数有变，用等分自适应排版的话，以上情况的排版方式能否接受</p>
</li>
</ul>
<p>然后得到的答复是：</p>
<p><em>产品：最多展示3个，最少展示1个，排版看还有没有更好的</em></p>
<p><em>视觉：按钮不用等分自适应，用定宽展示的</em></p>
<p>可以get到信息：</p>
<p>等分自适应的排版在这里不适用：<em>对视觉设计稿排版信息的理解与视觉设计师的原意有出入</em></p>
<p>与产品和视觉设计师对相应的信息进行确认后，于是给到了定宽的效果：</p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img10.jpg" alt="image"></p>
<p><em>（定宽：三个按钮）</em></p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img11.jpg" alt="image"></p>
<p><em>（定宽：两个按钮）</em></p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img12.jpg" alt="image"></p>
<p><em>（定宽：一个按钮）</em></p>
<p>定宽排版与等分排版两个方式对比来看：</p>
<ul>
<li><p>定宽排版的3个按钮与等分排版的效果一样</p>
</li>
<li><p>定宽排版的2个按钮比等分排版的效果差。</p>
</li>
<li><p>定宽排版的时候，按钮所占空间并没有等分展示区域，而文案离分隔线的间距又不相等，排版逻辑不清晰，显得很不整齐</p>
</li>
<li><p>定宽排版的1个按钮比等分排版的效果好。</p>
</li>
</ul>
<p>等分排版的时候，虽然按钮在展示区域中是居中对齐了，但是考虑到上下文的对齐，按钮并没有和星星的对齐，相反，等宽排版的文案更接近与星星的左对齐，虽然并没有绝对对齐，只是展现出来的排版效果、与上下文的排版逻辑显得更严谨。</p>
<p>其实两种排版的文案都没有办法100%保证与星星左对齐的，因为文案长度不一样，居中的位置就不一样：</p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img13.jpg" alt="image"></p>
<p><em>（定宽、等分的居中文案）</em></p>
<p>综合以上，向产品和视觉设计师提出建议：按钮的文案与分隔线间距相等，并且第一个按钮的文案与星星左对齐。于是得到了最终的效果：</p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img14.jpg" alt="image"></p>
<p><em>（优化后的）</em></p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img15.jpg" alt="image"></p>
<p><em>（优化后的）</em></p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img16.jpg" alt="image"></p>
<p><em>（优化后的）</em></p>
<p>这与原有的设计稿相比，扩展性更强，排版逻辑更严谨性、更趋向设计本意，建议是合理的。</p>
<p>优化的地方虽然不大，但我们需要对设计稿进行认真深入的分析，从产品层面、视觉层面、开发层面甚至交互层面去尽可能地解读设计稿，深入思考才能发现问题，提出合理的建议，101% 中的 1% 威力就会慢慢的程现出来。</p>
<h3 id="一个特殊的例子">一个特殊的例子</h3><p><img src="http://missoy.me/wp-content/uploads/2015/07/img17.jpg" alt="image"></p>
<p>由于项目快速迭代，视觉设计资源紧缺的原因，于是有了这张没有经过视觉流程的设计稿，是一位产品GG给到的，如果我们拿到设计稿，不加以思考的话，100%还原出来，那么</p>
<p>得到了第一稿：</p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img18.jpg" alt="image"></p>
<p>其实认真思考一下，可优化的地方还是有的：</p>
<p><strong>交互上</strong></p>
<ul>
<li><img src="http://missoy.me/wp-content/uploads/2015/07/img19.jpg" alt="image"> 和 <img src="http://missoy.me/wp-content/uploads/2015/07/img20.jpg" alt="image"> 这两个其实只是文案中的一部分，并没有任何交互，设计稿上却做成了和文本形成强烈对比的看上去可点击的按钮，容易误导用户去点</li>
</ul>
<p><strong>视觉上</strong></p>
<ul>
<li><p>复制按钮的配色欠恰当，复制的操作并不会引起用户警告或错误的提示，而红色恰好有让人警惕的意味</p>
</li>
<li><p>输入框和复制按钮的高度不一样，显得不够整齐美观</p>
</li>
<li><p>内容和顶部的间距太小，内容视觉焦点欠佳</p>
</li>
</ul>
<p>交互和视觉上都涉及到不同的信息传达，因此不能用对视觉稿进行主动修正，将以上信息和产品反馈</p>
<p>最终建议：</p>
<ul>
<li><p>“添加朋友” 和 “关注” 采用文本加色强调形式表现</p>
</li>
<li><p>复制按钮的颜色采取常用的给人友好感觉的绿色</p>
</li>
<li><p>调整复制按钮的调试使之与输入框的调试一样</p>
</li>
<li><p>调整内容与顶部的间距大小</p>
</li>
</ul>
<p>得到了第二稿：</p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img21.jpg" alt="image"></p>
<p><em>（第二稿）</em></p>
<p>第二稿中“您已收藏店铺，可在个人中心查看”的收藏反馈提示是产品新增的内容，一开始要求放在上图的位置，虽然第二稿在交互和视觉上得到了一定的优化，但还有优化的空间，特别是</p>
<p><strong>产品上</strong></p>
<ul>
<li>文字左对齐可显页面排版整齐，但从内容的亲密性上看，最底部的已收藏文字反馈提示并不属于引导操作的内容</li>
</ul>
<p>最终建议：</p>
<ul>
<li><p>让反馈内容居中对齐</p>
</li>
<li><p>增加与操作内容的边距，让用户可以一目了然看到反馈内容的归属</p>
</li>
<li><p>调整文案强调色的色系，让其不至于过重而显得太突眼。</p>
</li>
</ul>
<p>最终得到101%的还原效果：</p>
<p><img src="http://missoy.me/wp-content/uploads/2015/07/img22.jpg" alt="image"></p>
<p>这个例子中，最终还原出来的效果也许没有视觉设计师那么专业，但至少还原稿上多了一份思考，多了一份心思，在这过程中也能让大家去探讨一些非自己职位上的知识，互相学习，互相提高。</p>
<p>从100%到101%的过程，其实就是一个主动思考，积极执行的过程，是一个追求极致的过程，是一个把事做好的过程。在还原设计稿的过程中，1%在100%中占的比例不多，但是如果能把这1%处理得好，还原出来的设计稿会更具级数。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>100%还原设计稿，还原误差不超1像素</em> 是重构工程师入行的最基本要求，而在实际工作中，这100%是远远不够的。</p>
<p> 记得曾经带我的师傅说过一句话：</p>
<blockquote>
<p>重构工程师不应该满足100%还原设计稿，更应该去追求10]]>
    </summary>
    
      <category term="设计理念还原" scheme="http://aotu.io/tags/%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5%E8%BF%98%E5%8E%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git常用操作总结]]></title>
    <link href="http://aotu.io/notes/2015/11/19/Git-Commands/"/>
    <id>http://aotu.io/notes/2015/11/19/Git-Commands/</id>
    <published>2015-11-19T12:44:25.000Z</published>
    <updated>2015-11-26T08:20:54.000Z</updated>
    <content type="html"><![CDATA[<p>用Git比较久了，之前一直在Win用的TortoiseGit，现在命令行用的比较多，所以把一些指令总结一下，以便回顾和查询。<br>理解这些指令，觉得最重要的是理解Git的内部原理，比如Git的分布式版本控制，分清楚工作区、暂存区、版本库，还有就是理解Git跟踪并管理的是修改，而非文件。</p>
<a id="more"></a>
<h3 id="设置">设置</h3><pre><code>$ git config --global user<span class="class">.name</span> <span class="string">"Your Name"</span>
$ git config --global user<span class="class">.email</span> <span class="string">"email@example.com"</span>
</code></pre><h3 id="提交">提交</h3><p>git tracked的是修改，而不是文件</p>
<p><img src="/img/post/mamboer/git-trees.jpg" alt="git-track"></p>
<pre><code><span class="comment">#将“当前修改”移动到暂存区(stage)</span>
<span class="variable">$ </span>git add somfile.txt
<span class="comment">#将暂存区修改提交</span>
<span class="variable">$ </span>git commit -m <span class="string">"Add somfile.txt."</span>
</code></pre><h3 id="状态">状态</h3><pre><code><span class="variable">$ </span>git status
<span class="variable">$ </span>git diff
</code></pre><h3 id="回退">回退</h3><pre><code># 放弃工作区修改
$ git checkout <span class="comment">-- file.name</span>
$ git checkout <span class="comment">-- .</span>

# 取消<span class="operator"><span class="keyword">commit</span>(比如需要重写<span class="keyword">commit</span>信息)
$ git <span class="keyword">reset</span> <span class="comment">--soft HEAD</span>

# 取消<span class="keyword">commit</span>、<span class="keyword">add</span>(重新提交代码和<span class="keyword">commit</span>)
$ git <span class="keyword">reset</span> <span class="keyword">HEAD</span>
$ git <span class="keyword">reset</span> <span class="comment">--mixed HEAD</span>

# 取消<span class="keyword">commit</span>、<span class="keyword">add</span>、工作区修改(需要完全重置)
$ git <span class="keyword">reset</span> <span class="comment">--hard HEAD</span></span>
</code></pre><h3 id="记录">记录</h3><pre><code><span class="variable">$ </span>git reflog
<span class="variable">$ </span>git log
</code></pre><h3 id="删除">删除</h3><pre><code>$ <span class="keyword">rm</span> <span class="keyword">file</span>.name
$ git <span class="keyword">rm</span> <span class="keyword">file</span>.name
$ git commit -<span class="keyword">m</span> <span class="string">"Del"</span>
</code></pre><h3 id="远程操作">远程操作</h3><pre><code>$ git remote add origin git@github.com:michaelliao/learngit.git
<span class="comment"># 第一次推送，-u(--set-upstream)指定默认上游</span>
$ git push -u origin <span class="keyword">master</span>
<span class="title">$</span> git push origin <span class="literal">master</span>
</code></pre><h3 id="克隆">克隆</h3><pre><code>$ git clone https:<span class="comment">//github.com/Yikun/yikun.github.com.git path</span>
$ git clone git@github<span class="class">.com</span>:Yikun/yikun<span class="class">.github</span><span class="class">.com</span><span class="class">.git</span> path
</code></pre><h3 id="分支操作">分支操作</h3><p><img src="/img/post/mamboer/git-merge.png" alt="about-merge"></p>
<pre><code><span class="comment"># 查看当前分支</span>
<span class="variable">$ </span>git branch

<span class="comment"># 创建分支</span>
<span class="variable">$ </span>git branch dev
<span class="comment"># 切换分支</span>
<span class="variable">$ </span>git checkout dev

<span class="comment"># 创建并checkout分支</span>
<span class="variable">$ </span>git checkout -b dev

<span class="comment"># 合并分支</span>
<span class="variable">$ </span>git merge dev

<span class="comment"># 删除分支</span>
<span class="variable">$ </span>git branch -d dev
</code></pre><h3 id="标签">标签</h3><pre><code>$ git <span class="keyword">tag</span> <span class="title">0</span>.<span class="number">1.1</span>
$ git push origin --tags
</code></pre><p>注意：本文Fork自 <a href="http://yikun.github.io/" target="_blank" rel="external">yikun.github.io</a>，<a href="http://aotu.io">凹凸实验室</a>作进一步完善。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>用Git比较久了，之前一直在Win用的TortoiseGit，现在命令行用的比较多，所以把一些指令总结一下，以便回顾和查询。<br>理解这些指令，觉得最重要的是理解Git的内部原理，比如Git的分布式版本控制，分清楚工作区、暂存区、版本库，还有就是理解Git跟踪并管理的是修改，而非文件。</p>]]>
    
    </summary>
    
      <category term="Fork" scheme="http://aotu.io/tags/Fork/"/>
    
      <category term="Git" scheme="http://aotu.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[css层叠顺序探究]]></title>
    <link href="http://aotu.io/notes/2015/11/18/css-stack-order/"/>
    <id>http://aotu.io/notes/2015/11/18/css-stack-order/</id>
    <published>2015-11-18T11:44:25.000Z</published>
    <updated>2015-11-24T11:13:40.000Z</updated>
    <content type="html"><![CDATA[<p>嗯~一个比较基础但容易混乱的知识点~</p>
<p>首先上一大段文绉绉的w3c规范以表明这是一篇严肃的学术文章（觉得太长可先跳过~）：</p>
<blockquote>
<p>In CSS 2.1, each box has a position in three dimensions. In addition to their horizontal and vertical positions, boxes lie along a “z-axis” and are formatted one on top of the other. Z-axis positions are particularly relevant when boxes overlap visually.</p>
<p>The order in which the rendering tree is painted onto the canvas is described in terms of stacking contexts. Stacking contexts can contain further stacking contexts. A stacking context is atomic from the point of view of its parent stacking context; boxes in other stacking contexts may not come between any of its boxes.</p>
<p>Each box belongs to one stacking context. Each positioned box in a given stacking context has an integer stack level, which is its position on the z-axis relative other stack levels within the same stacking context. Boxes with greater stack levels are always formatted in front of boxes with lower stack levels. Boxes may have negative stack levels. Boxes with the same stack level in a stacking context are stacked back-to-front according to document tree order.</p>
<p>——<a href="http://www.w3.org/TR/CSS2/visuren.html#propdef-z-index" target="_blank" rel="external">W3C</a></p>
</blockquote>
<p>其实说人话，大致意思就是：</p>
<p><strong>1. 每个盒模型的位置是三维的，除了x轴和y轴，还有一个表示层叠的z轴；</strong></p>
<p><strong>2. z轴上的位置决定了我们看到的盒模型之间的层叠效果（谁盖住谁）。</strong></p>
<p>上述规范还解释了层叠上下文的特点以及盒模型的层叠级别，下面我们通过栗子慢慢探究。</p>
<h2 id="1-_浮动与行内">1. 浮动与行内</h2><p><strong>eg.1-1/eg.1-2共同结构与样式</strong></p>
<p>html:</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"div1"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"div2"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"div3"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"div4"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"div5"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>css:</p>
<pre><code><span class="tag">div</span><span class="rules">{<span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> <span class="hexcolor">#000</span> dashed</span></span>;<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">200px</span></span></span>;<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">300px</span></span></span>;<span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;}</span>
<span class="class">.div1</span><span class="rules">{<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#FF4363</span></span></span>;<span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0</span> <span class="number">0</span></span></span>;}</span>
<span class="class">.div2</span><span class="rules">{<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#FC9D99</span></span></span>;<span class="rule"><span class="attribute">margin</span>:<span class="value">-<span class="number">170px</span> <span class="number">20px</span></span></span>;}</span>
<span class="class">.div3</span><span class="rules">{<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#F9CCAD</span></span></span>;<span class="rule"><span class="attribute">margin</span>:<span class="value">-<span class="number">160px</span> <span class="number">40px</span></span></span>;}</span>
<span class="class">.div4</span><span class="rules">{<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#C7C7A8</span></span></span>;<span class="rule"><span class="attribute">margin</span>:<span class="value">-<span class="number">150px</span> <span class="number">60px</span></span></span>;}</span>
<span class="class">.div5</span><span class="rules">{<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#84AF9B</span></span></span>;<span class="rule"><span class="attribute">margin</span>:<span class="value">-<span class="number">140px</span> -<span class="number">10px</span></span></span>;}</span>
</code></pre><p><strong>eg.1-1：常规流中非定位非行内元素的层叠情况</strong></p>
<p class="user_img"><img src="/img/post/2015-11-18-stack-order/1-1-normal-order.png"></p>
<p><strong>＊ 结论： 常规流中非定位非行内的元素根据html顺序，按照“后来居上”的规则层叠。</strong></p>
<hr>
<p><strong>eg.1-2：定位元素／行内元素／浮动元素之间的层叠关系</strong></p>
<p class="user_img"><img src="/img/post/2015-11-18-stack-order/1-2-change-order.png"></p>
<p><strong>＊ 结论： 层叠顺序如下（高➡低）：</strong></p>
<ul>
<li><strong>z-index为auto的定位元素</strong></li>
<li><strong>常规流内行内非定位元素</strong></li>
<li><strong>非定位的浮动元素</strong></li>
<li><strong>常规流内非行内非定位元素</strong></li>
<li><strong>z-index为负的定位元素</strong></li>
</ul>
<h2 id="2-_为定位元素设置z-index">2. 为定位元素设置z-index</h2><p>首先，你必须了解以下两点：</p>
<ol>
<li>每个定位元素都有一个整型的层叠级别（stack level）；</li>
<li>z-index属性只对定位元素有效。</li>
</ol>
<p><strong>eg.2-1/eg.2-2共同结构与样式:</strong> </p>
<p>html:</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"div1"</span> style=<span class="string">"position:relative"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"div2"</span> style=<span class="string">"position:relative"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"div3"</span> style=<span class="string">"position:relative"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"div4"</span> style=<span class="string">"position:relative"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"div5"</span> style=<span class="string">"position:relative"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>css:</p>
<pre><code><span class="tag">div</span><span class="rules">{<span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> <span class="hexcolor">#000</span> dashed</span></span>;<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">200px</span></span></span>;<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">300px</span></span></span>;<span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;}</span>
<span class="class">.div1</span><span class="rules">{<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#FF4363</span></span></span>;<span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0</span> <span class="number">0</span></span></span>;}</span>
<span class="class">.div2</span><span class="rules">{<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#FC9D99</span></span></span>;<span class="rule"><span class="attribute">margin</span>:<span class="value">-<span class="number">170px</span> <span class="number">20px</span></span></span>;}</span>
<span class="class">.div3</span><span class="rules">{<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#F9CCAD</span></span></span>;<span class="rule"><span class="attribute">margin</span>:<span class="value">-<span class="number">160px</span> <span class="number">40px</span></span></span>;}</span>
<span class="class">.div4</span><span class="rules">{<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#C7C7A8</span></span></span>;<span class="rule"><span class="attribute">margin</span>:<span class="value">-<span class="number">150px</span> <span class="number">60px</span></span></span>;}</span>
<span class="class">.div5</span><span class="rules">{<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#84AF9B</span></span></span>;<span class="rule"><span class="attribute">margin</span>:<span class="value">-<span class="number">140px</span> -<span class="number">10px</span></span></span>;}</span>
</code></pre><p><strong>eg.2-1: 5个定位元素在未设置z-index时的层叠情况</strong></p>
<p class="user_img"><img src="/img/post/2015-11-18-stack-order/2-1-normal-order.png"></p>
<p><strong>＊ 结论： z-index为auto的定位元素根据html顺序，按照“后来居上”的规则层叠。</strong></p>
<hr>
<p><strong>eg.2-2: 5个定位元素设置不同z-index时的层叠情况</strong></p>
<p class="user_img"><img src="/img/post/2015-11-18-stack-order/2-2-change-order.png"></p>
<p><strong>＊ 结论：</strong></p>
<ol>
<li><strong>定位元素的层叠级别由z-index的值决定，z-index为auto则其层叠级别为0（注意：只是层级为0，其z-index值仍为auto）；</strong></li>
<li><strong>同一层叠上下文中，层叠级别大的元素位于层叠级别小的元素之上；</strong></li>
<li><strong>同一层叠上下文中，层叠级别相同的元素根据html顺序决定元素的层叠关系，遵循“后来居上”原则。</strong></li>
</ol>
<h2 id="3-_层叠顺序（stack_order）">3. 层叠顺序（stack order）</h2><p>结合上面的例子进行总结，可得每一个层叠上下文内的层叠顺序：</p>
<blockquote>
<p>Within each stacking context, the following layers are painted in back-to-front order:</p>
<ol>
<li>the background and borders of the element forming the stacking context.</li>
<li>the child stacking contexts with negative stack levels (most negative first).</li>
<li>the in-flow, non-inline-level, non-positioned descendants.</li>
<li>the non-positioned floats.</li>
<li>the in-flow, inline-level, non-positioned descendants, including inline tables and inline blocks.</li>
<li>the child stacking contexts with stack level 0 and the positioned descendants with stack level 0.</li>
<li>the child stacking contexts with positive stack levels (least positive first).</li>
</ol>
<p>—<a href="http://www.w3.org/TR/CSS2/visuren.html#propdef-z-index" target="_blank" rel="external">W3C</a></p>
</blockquote>
<p>规范中的描述比较乏味，可结合<a href="http://www.w3help.org/zh-cn/kb/013" target="_blank" rel="external">w3help</a>中的一张图片进行理解：</p>
<blockquote>
<p class="user_img"><img src="/img/post/2015-11-18-stack-order/3-1-summay-order.png"></p>
</blockquote>
<h2 id="4-_层叠上下文（stacking_context）">4. 层叠上下文（stacking context）</h2><p>看完上述的例子，对于层叠顺序应该大致了解了。</p>
<p>但突然冒出一个“层叠上下文”，这又是个什么鬼？</p>
<h3 id="4-1_层叠上下文的特点">4.1 层叠上下文的特点</h3><blockquote>
<ol>
<li>stacking context可以嵌套</li>
<li>每个stacking context相对于兄弟元素是完全独立的，其内部规则不会影响到外部</li>
<li>每个stacking context元素都会被父stacking context当做一个元素施加stacking规则</li>
</ol>
<p>——<a href="http://blog.angular.in/css-stacking-contextli-na-xie-xian-wei-ren-zhi-de-keng/" target="_blank" rel="external">Abruzzi</a></p>
</blockquote>
<h3 id="4-2_层叠上下文的创建">4.2 层叠上下文的创建</h3><h4 id="css2">css2</h4><hr>
<blockquote>
<p>The root element forms the root stacking context. Other stacking contexts are generated by any positioned element (including relatively positioned elements) having a computed value of ‘z-index’ other than ‘auto’. Stacking contexts are not necessarily related to containing blocks.</p>
<p>——<a href="http://www.w3.org/TR/CSS2/visuren.html#propdef-z-index" target="_blank" rel="external">W3C</a></p>
</blockquote>
<p><strong>CSS2中规定创建层叠上下文的两种情况：</strong></p>
<ol>
<li><strong>根元素（html）</strong></li>
<li><strong>定位元素（absolute/relative）且z-index的值不为auto</strong></li>
</ol>
<p>注：在同一层叠上下文中，父元素、子元素与自身都被当作是并级关系进行层叠级别的比较。他们之间可能互相层叠。</p>
<p><strong>eg.4-1：z-index为auto的定位元素没有创建层叠上下文</strong></p>
<p>html:</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"div1"</span> style=<span class="string">"position:relative"</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"div1_1"</span> style=<span class="string">"position:relative;z-index:9"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"div2"</span> style=<span class="string">"position:relative"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>css:</p>
<pre><code><span class="tag">div</span><span class="rules">{<span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> <span class="hexcolor">#000</span> dashed</span></span>;<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">200px</span></span></span>;<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">400px</span></span></span>;<span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;}</span>
<span class="class">.div1</span><span class="rules">{<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#FF4363</span></span></span>;}</span>
<span class="class">.div1_1</span><span class="rules">{<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#FC9D99</span></span></span>;<span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">100px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span></span></span>;<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>;}</span>
<span class="class">.div2</span><span class="rules">{<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#F9CCAD</span></span></span>;<span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">300px</span></span></span>;}</span>
</code></pre><p class="user_img"><img src="/img/post/2015-11-18-stack-order/4-1-normal-order.png"></p>
<p>分析上述例子：</p>
<ul>
<li>前提：<ol>
<li>div1、div1_1、div2都是定位元素</li>
<li>div1、div2都没有设置z-index值；</li>
</ol>
</li>
<li>假设：div1与div2创建了层叠上下文：<ol>
<li>不同层叠上下文之间是相对独立的，div1_1属于div1所创建的层叠上下文，与div2所创建的层叠上下文无关；</li>
<li>根据“后来居上”原则，则div2应该在div1及其子元素div1_1之上；</li>
</ol>
</li>
<li>由上述例子可得，div1的子元素div1_1在div2之上； </li>
<li>因此div1、div2没有创建层叠上下文。</li>
</ul>
<p><strong>＊ 结论： z-index为auto的定位元素不会创建新的层叠上下文。</strong></p>
<hr>
<p><strong>IE中的BUG：</strong></p>
<p>在IE6-7浏览器中测试eg.4-1：</p>
<p class="user_img"><img src="/img/post/2015-11-18-stack-order/4-2-ie-bug.png"></p>
<p><strong>＊ 结论： ie6-7中，z-index为auto的定位元素也会创建新的层叠上下文。</strong></p>
<h4 id="css3">css3</h4><hr>
<blockquote>
<p>A stacking context is formed, anywhere in the document, by any element which is either</p>
<ul>
<li>the root element (HTML),</li>
<li>positioned (absolutely or relatively) with a z-index value other than “auto”,</li>
<li>a flex item with a z-index value other than “auto”,that is the parent element display: flex|inline-flex,</li>
<li>elements with an opacity value less than 1. (See the specification for opacity),</li>
<li>elements with a transform value other than “none”,</li>
<li>elements with a mix-blend-mode value other than “normal”,</li>
<li>elements with a filter value other than “none”,</li>
<li>elements with isolation set to “isolate”,</li>
<li>position: fixed</li>
<li>specifying any attribute above in will-change even if you don’t specify values for these attributes directly (See this post)</li>
<li>elements with -webkit-overflow-scrolling set to “touch”</li>
</ul>
<p>——<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context" target="_blank" rel="external">MDN</a></p>
</blockquote>
<p><strong>CSS3中规定创建层叠上下文的十种情况：</strong></p>
<ul>
<li><strong>根元素 (HTML)</strong></li>
<li><strong>绝对（absolute）定位或相对（relative）定位且 z-index 值不为”auto”</strong></li>
<li><strong>一个 flex 项目(flex item)，且 z-index 值不为 “auto”，也就是父元素 display: flex|inline-flex</strong></li>
<li><strong>元素的 opacity 属性值小于 1（参考 the specification for opacity）</strong></li>
<li><strong>元素的 transform 属性值不为 “none”</strong></li>
<li><strong>元素的 mix-blend-mode 属性值不为 “normal”</strong></li>
<li><strong>元素的 isolation 属性被设置为 “isolate”</strong></li>
<li><strong>在 mobile WebKit 和 Chrome 22+ 内核的浏览器中，position: fixed 总是创建一个新的层叠上下文, 即使 z-index 的值是 “auto”</strong></li>
<li><strong>在 will-change 中指定了任意 CSS 属性，即便你没有定义该元素的这些属性</strong></li>
<li><strong>元素的 -webkit-overflow-scrolling 属性被设置 “touch”</strong></li>
</ul>
<hr>
<p><strong>eg.4-2：opacity创建新的层叠上下文</strong></p>
<p class="user_img"><img src="/img/post/2015-11-18-stack-order/4-3-opacity-order.png"></p>
<p>分析：</p>
<blockquote>
<p>If an element with opacity less than 1 is not positioned, implementations must paint the layer it creates, within its parent stacking context, at the same stacking order that would be used if it were a positioned element with ‘z-index: 0’ and ‘opacity: 1’. </p>
<p>If an element with opacity less than 1 is positioned, the ‘z-index’ property applies as described in [CSS21], except that ‘auto’ is treated as ‘0’ since a new stacking context is always created.</p>
<p>——<a href="http://www.w3.org/TR/css3-color/#transparency" target="_blank" rel="external">W3C</a></p>
</blockquote>
<p><strong>＊ 结论：</strong></p>
<ol>
<li><strong>如果元素设置opacity小于1但未定位，视为css2中元素定位／z-index:0且opacity:1的情况；</strong></li>
<li><strong>如果元素设置opacity小于1且定位，z-index为auto，视为css2中元素定位且z-index:0的情况；</strong></li>
<li><strong>如果元素设置opacity小于1且定位，z-index不为auto，则根据css2的描述层叠。</strong></li>
</ol>
<p>其他CSS3创建层叠上下文的元素情况与opacity相同，故不赘述。</p>
<hr>
<p>至此，应该能够明白：</p>
<ol>
<li>根元素（html）会创建一个新的层叠上下文</li>
<li>上述CSS2／CSS3中的元素会创建新的层叠上下文</li>
<li>在每一个层叠上下文中都遵循上文中提到的层叠顺序</li>
<li>每一个层叠上下文（除根元素）在它的父层叠上下文中都以一个普通元素来对待，其内部的层叠规则不影响其本身在父层叠上下文（即其所属层叠上下文）中的层叠顺序。</li>
</ol>
<h3 id="4-3_层叠上下文的层级">4.3 层叠上下文的层级</h3><hr>
<ul>
<li>z-index值为auto的层叠上下文（z-index未设置的定位元素）层级为0；</li>
<li>z-index值为0（根元素／z-index为0的定位元素／css3中提到的除根元素与定位元素之外的其他会创建层叠上下文的未定位或已定位无设置z-index的元素）的层叠上下文层级为0；</li>
<li>z-index值已设置且不为0的层叠上下文层级（z-index已设置且不为0的定位元素）与z-index的值相等；</li>
<li>相同层级的层叠上下文遵循“后来居上”的规则层叠。</li>
</ul>
<h2 id="5-_小结">5. 小结</h2><ol>
<li>属于同一层叠上下文的元素（无论它们在结构上是兄弟或父子，甚至是祖孙），都遵循上文所述的层叠顺序；</li>
<li>不同的层叠上下文之间，层级较大的层叠上下文元素及其内部元素位于层级小的层叠上下文元素及其内部元素之上；</li>
<li>不同的层叠上下文之间互相独立；</li>
<li>层叠上下文可嵌套，内部规则不影响外部。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>嗯~一个比较基础但容易混乱的知识点~</p>
<p>首先上一大段文绉绉的w3c规范以表明这是一篇严肃的学术文章（觉得太长可先跳过~）：</p>
<blockquote>
<p>In CSS 2.1, each box has a position in three dime]]>
    </summary>
    
      <category term="CSS" scheme="http://aotu.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于phantomJs的网络爬虫]]></title>
    <link href="http://aotu.io/notes/2015/11/18/phantomJs-crawler/"/>
    <id>http://aotu.io/notes/2015/11/18/phantomJs-crawler/</id>
    <published>2015-11-18T09:59:33.000Z</published>
    <updated>2015-12-01T02:37:42.000Z</updated>
    <content type="html"><![CDATA[<h1 id="基于phantomJs2-0的网络爬虫">基于phantomJs2.0的网络爬虫</h1><p><strong>phantomJs</strong>是一个基于WebKit的服务器端JavaScript API。它全面支持web而不需浏览器支持，其快速，原生支持各种Web标准： DOM 处理, CSS 选择器, JSON, Canvas, 和 SVG。PhantomJS可以用于页面自动化，网络监测，网页截屏，以及无界面测试等。</p>
<h3 id="用途概述：">用途概述：</h3><ul>
<li><strong>屏幕快照</strong> ：官方提供的API中<a href="http://phantomjs.org/api/webpage/method/render.html" target="_blank" rel="external">page.render</a> 提供了强大的屏幕快照功能；</li>
<li><strong>网络爬虫</strong> ：<a href="http://phantomjs.org/api/webpage/method/evaluate.html" target="_blank" rel="external">page.evaluate</a> 方法提供了一个沙箱来帮助你像用js操作dom一样简单的获取你想要的内容，避免了使用复杂的正则匹配内容；</li>
<li><strong>网络情况监控</strong> ：定期对网站进行pageSpeed检查、可用于打开速度缓慢短信报警等服务(本文暂不做深入介绍)。</li>
<li><strong>页面自动化操作</strong> ：phantomJs2.0 提供了丰富的API用于页面自动化操作</li>
</ul>
<hr>
<h2 id="关于安装">关于安装</h2><blockquote>
<p>网络上有大量的安装教程，如果你用的osx，建议直接<code>brew update &amp;&amp; brew install phantomjs</code>。此处只叙述下在安装过程中遇到的一个坑。</p>
</blockquote>
<p>在Mac OS Yosemite  版本可能都会遇到这样一个问题：<br>运行 <code>phantomjs hello.js</code> 后得到了报错信息：<code>Killed: 9</code><br>这个问题的原始链接在这里<a href="https://github.com/ariya/phantomjs/issues/12928" target="_blank" rel="external">github:issue/12928</a> 解决方案如下：<a href="http://stackoverflow.com/questions/28267809/phantomjs-getting-killed-9-for-anything-im-trying" target="_blank" rel="external">stackoverflow</a></p>
<ol>
<li>Install UPX. UPX is an executable packer and unpacker<br> <code>$ brew install upx</code></li>
<li>Unpack the phantomjs executable<br> <code>$ upx -d phantomjs-2.0.0-macosx/bin/phantomjs</code></li>
<li>Run the phantomjs executable<br> <code>$ ./phantomjs-2.0.0-macosx/bin/phantomjs</code></li>
</ol>
<h2 id="先感受下phantomJs的强大">先感受下phantomJs的强大</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> page = <span class="keyword">require</span>(<span class="string">'webpage'</span>).create();</span><br><span class="line">page.open(<span class="string">'http://jd.com'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">page.render(<span class="string">'jd.png'</span>);</span><br><span class="line">phantom.<span class="keyword">exit</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>把以上代码保存到screen.js，切到terminal：<br><code>$ phantomejs screen.js</code></p>
<p><strong>可以得到如下的网站截图：</strong><br><img src="http://ww1.sinaimg.cn/large/80c4aaf9gw1ey49t6wl41j20rb0d1jxj.jpg" alt="Alt text"></p>
<blockquote>
<p>当然还可以继续<a href="http://phantomjs.org/api/webpage/property/scroll-position.html" target="_blank" rel="external">page.scrollPosition</a>以及Js脚本做延时截图，来避免截图中出现图片未加载完全等问题。</p>
</blockquote>
<h2 id="页面自动化操作">页面自动化操作</h2><h3 id="自动登录京东">自动登录京东</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</span><br><span class="line"></span><br><span class="line">page.onLoadStarted =<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    loadInProgress =<span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"load started"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">page.onLoadFinished = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    loadInProgress = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"load finished"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">page.onUrlChanged = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"onUrlChanged"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"> page.open(<span class="string">'https://passport.jd.com/new/login.aspx'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    page.includeJs(<span class="string">"http://apps.bdimg.com/libs/jquery/1.6.4/jquery.js"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> rect = page.evaluate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">'#loginname'</span>).val(<span class="string">'username'</span>);</span><br><span class="line">            $(<span class="string">'#nloginpwd'</span>).val(<span class="string">'passwd'</span>);</span><br><span class="line">            $(<span class="string">'#loginsubmit'</span>)[<span class="number">0</span>].click();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">document</span>.title;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//若引入jQuery 则用这种方法来实现click</span></span><br><span class="line">        page.sendEvent(<span class="string">'click'</span>, rect.left + rect.width / <span class="number">2</span>, rect.top + rect.height / <span class="number">2</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(rect);</span><br><span class="line">        <span class="keyword">var</span> clock =setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            page.render(<span class="string">'jdlogin.png'</span>);</span><br><span class="line">            phantom.exit();</span><br><span class="line">        &#125;,<span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>phantomJs2.0中click事件不是标准事件<br> 若 <code>page.evaluate</code>中操作dom时并未引入jQuery，则应自己实现一个click事件如下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">click</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ev = <span class="built_in">document</span>.createEvent(<span class="string">"MouseEvent"</span>);</span><br><span class="line">    ev.initMouseEvent(</span><br><span class="line">        <span class="string">"click"</span>,</span><br><span class="line">        <span class="literal">true</span> <span class="comment">/* bubble */</span>, <span class="literal">true</span> <span class="comment">/* cancelable */</span>,</span><br><span class="line">        <span class="built_in">window</span>, <span class="literal">null</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="comment">/* coordinates */</span></span><br><span class="line">        <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="comment">/* modifier keys */</span></span><br><span class="line">        <span class="number">0</span> <span class="comment">/*left*/</span>, <span class="literal">null</span></span><br><span class="line">    );</span><br><span class="line">    el.dispatchEvent(ev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解决方案来自<a href="http://stackoverflow.com/questions/15739263/phantomjs-click-an-element" target="_blank" rel="external">stackoverflow:questions/15739263</a></p>
<p><strong>登录后截屏</strong><br><img src="http://ww3.sinaimg.cn/large/80c4aaf9gw1ey49s5j9pjj20rd0hiaic.jpg" alt="Alt text"></p>
<blockquote>
<p>可以看到此登录并未触发验证，若用别的网站被脱库的账号密码来批量查询的话，有很大概率撞库。</p>
</blockquote>
<h2 id="网络爬虫">网络爬虫</h2><h3 id="数据抓取的快感">数据抓取的快感</h3><blockquote>
<p>众所周知知乎的搜索如此之烂，刚看过的问题，再搜就搜不到了，那把知乎上你想要的分类的问题抓取下来，自己搜索咯。（当然想这么一个烂理由来抓人家的数据也是醉人）。随便抓人家的数据不好，此处只做技术分享，切勿用于商业用途。</p>
</blockquote>
<h5 id="批量抓取知乎某个分类下的所有问题">批量抓取知乎某个分类下的所有问题</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create(),</span><br><span class="line">    testindex = <span class="number">0</span>,</span><br><span class="line">    finalAns = [],</span><br><span class="line">    fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line">page.onLoadStarted =<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    loadInProgress =<span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"load started"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">page.onLoadFinished = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    loadInProgress = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"load finished"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">page.onUrlChanged = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"onUrlChanged"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> circle = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    testindex++;</span><br><span class="line">    <span class="keyword">if</span>(testindex === <span class="number">51</span>)&#123;</span><br><span class="line">        clearInterval(circle);</span><br><span class="line">        phantom.exit();</span><br><span class="line">    &#125;</span><br><span class="line">    page.open(<span class="string">'http://www.zhihu.com/topic/19559937?page='</span>+testindex, <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(status == <span class="string">'fail'</span>)&#123;</span><br><span class="line">            testindex--;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> rect = page.evaluate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> titleArr = [];</span><br><span class="line">            <span class="built_in">window</span>.scrollTo(<span class="number">0</span>,<span class="built_in">document</span>.body.scrollHeight);</span><br><span class="line">                <span class="keyword">var</span> title = $(<span class="string">'.feed-item .question_link'</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; title.length; j++)&#123;</span><br><span class="line">                    titleArr[j] = title[j].text;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">return</span> titleArr;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span>(rect == <span class="literal">null</span>)&#123;</span><br><span class="line">            testindex--;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        file = fs.open(<span class="string">"liuxue.txt"</span>, <span class="string">'a'</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> h = <span class="number">0</span>; h &lt; rect.length; h++)&#123;</span><br><span class="line">            file.write(rect[h]+<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        file.close();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中用到了批量page.open 页面来控制翻页到所有的问题，然后将查询到的数据写入文件中，用到了File System API.</p>
</blockquote>
<h3 id="运用场景畅想">运用场景畅想</h3><ol>
<li>网络性能测试可用于批量、定期对竞品网站做查询，进行竞品分析如打开速度、改版频率等等。</li>
<li>网络爬虫可批量获取数据进行竞品分析、行业报告等。</li>
<li>页面自动化操作可用于网站自动化测试等。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="基于phantomJs2-0的网络爬虫">基于phantomJs2.0的网络爬虫</h1><p><strong>phantomJs</strong>是一个基于WebKit的服务器端JavaScript API。它全面支持web而不需浏览器支持，其快速，原生支持各种]]>
    </summary>
    
      <category term="Crawler" scheme="http://aotu.io/tags/Crawler/"/>
    
      <category term="PhantomJS" scheme="http://aotu.io/tags/PhantomJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Service Workers：采用WebP动态响应图片]]></title>
    <link href="http://aotu.io/notes/2015/11/18/webp-responsive-image/"/>
    <id>http://aotu.io/notes/2015/11/18/webp-responsive-image/</id>
    <published>2015-11-17T18:44:25.000Z</published>
    <updated>2015-11-24T12:55:36.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>译文地址：<a href="http://deanhume.com/Home/BlogPost/service-workers--dynamic-responsive-images-using-webp-images/10132/" target="_blank" rel="external">http://deanhume.com/Home/BlogPost/service-workers--dynamic-responsive-images-using-webp-images/10132/</a></p>
</blockquote>
<p>图片在如今的站点上不可或缺。试想一下，在我们网页上没有图片会怎样？高质量的图片能够使你的站点更加出色，但同时伴随着一定的性能损耗。由于图片文件较大，下载时间相对较长并且会减缓页面的加载。如果是一个带宽较低的用户，用户体验将会特别差。</p>
<p>在移动设备上面，这种现象会更加明显。在移动设备上加载大型图片消耗时间取决你的网络以及连接速度。如果你是一个不耐心的用户，你将会变得沮丧。幸运的是，我们有能力处理 <a href="https://responsiveimages.org/" target="_blank" rel="external">响应式图片</a> 。通过使用 <a href="https://html.spec.whatwg.org/multipage/embedded-content.html#the-picture-element" target="_blank" rel="external">picture</a> 标签，我们可以根据用户的设备为用户提供不同大小、设备像素比（DPR）以及格式的图片。例如，下面的代码就可以做到这一点。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">picture</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">source</span></span><br><span class="line">        <span class="attribute">media</span>=<span class="value">"(min-width: 1024px)"</span></span><br><span class="line">        <span class="attribute">srcset</span>=<span class="value">"./images/brooklyn.jpg, ./images/brooklyn-2x.jpg 2x, ./images/brooklyn-3x.jpg 3x"</span></span><br><span class="line">        <span class="attribute">type</span>=<span class="value">"image/jpeg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">source</span></span><br><span class="line">        <span class="attribute">media</span>=<span class="value">"(min-width: 320px)"</span></span><br><span class="line">        <span class="attribute">srcset</span>=<span class="value">"./images/brooklyn-small.jpg, ./images/brooklyn-small-2x.jpg 2x, ./images/brooklyn-small-3x.jpg 3x"</span></span><br><span class="line">        <span class="attribute">type</span>=<span class="value">"image/jpeg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们指定不同的图像大小及其相应的设备像素比给给定的屏幕宽度。使用 <strong>picture</strong> 标签，浏览器可以基于设备决定最佳的内容。以上的代码可以完美运行，我们可以进一步扩展，以适应更多的场景。</p>
<p>你可能听过<strong>WebP</strong>图片格式。相比于PNG图片，其文件大小能够节省26％；相比于JPEG图片，能够节省大约25％-34%。目前，Chrome、Opera以及Android能够支持WebP格式，但Safari和IE尚未支持。既然我们能够用picture标签来处理响应式图片，我们也能够使用WebP格式的图片并且允许浏览器在不支持WebP时进行回退。</p>
<p><img src="http://a43d55f6a02c4be185ce-9cfa4cf7c673a59966ad8296f4c88804.r44.cf3.rackcdn.com/WebP/logo-webp.png" alt="webp"></p>
<p>让我们在上面代码的基础上，添加WebP图片的支持。同时，我们要确保能够根据不同的DPR使用最佳视觉效果的图片。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">picture</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JPEG Images --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">source</span></span><br><span class="line">        <span class="attribute">media</span>=<span class="value">"(min-width: 1024px)"</span></span><br><span class="line">        <span class="attribute">srcset</span>=<span class="value">"./images/brooklyn.jpg, ./images/brooklyn-2x.jpg 2x, ./images/brooklyn-3x.jpg 3x"</span></span><br><span class="line">        <span class="attribute">type</span>=<span class="value">"image/jpeg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">source</span></span><br><span class="line">        <span class="attribute">media</span>=<span class="value">"(min-width: 320px)"</span></span><br><span class="line">        <span class="attribute">srcset</span>=<span class="value">"./images/brooklyn-small.jpg, ./images/brooklyn-small-2x.jpg 2x, ./images/brooklyn-small-3x.jpg 3x"</span></span><br><span class="line">        <span class="attribute">type</span>=<span class="value">"image/jpeg"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- WebP Images --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">source</span></span><br><span class="line">        <span class="attribute">media</span>=<span class="value">"(min-width: 1024px)"</span></span><br><span class="line">        <span class="attribute">srcset</span>=<span class="value">"./images/brooklyn.webp, ./images/brooklyn-2x.webp 2x, ./images/brooklyn-3x.webp 3x"</span></span><br><span class="line">        <span class="attribute">type</span>=<span class="value">"image/webp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">source</span></span><br><span class="line">        <span class="attribute">media</span>=<span class="value">"(min-width: 320px)"</span></span><br><span class="line">        <span class="attribute">srcset</span>=<span class="value">"./images/brooklyn-small.webp, ./images/brooklyn-small-2x.webp 2x, ./images/brooklyn-small-3x.webp 3x"</span></span><br><span class="line">        <span class="attribute">type</span>=<span class="value">"image/webp"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- The fallback image --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">img</span></span><br><span class="line">        <span class="attribute">src</span>=<span class="value">"./images/brooklyn.jpg"</span> <span class="attribute">alt</span>=<span class="value">"Brooklyn Bridge - New York"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们已经创建了能够同时使用JPEG和WebP图片的picture标签。浏览器将根据设备决定最佳的选项。由于WebP并不支持IE和Safari，使用WebP图片意味着你需要在服务器上同时保存WebP和JPEG格式的图片副本。上面的代码足够满足我们当前的需求，但试想一下如果每张采用这种方式来编写，代码将会变得非常臃肿。当你的站点开始增长时，为每张图片编写上面的代码将会变得非常乏味。这时候，便可以采用Service Workers来解决这个问题。</p>
<p><img src="http://a43d55f6a02c4be185ce-9cfa4cf7c673a59966ad8296f4c88804.r44.cf3.rackcdn.com/Service-Workers-WebP/accept-headers-webp.png" alt="webp"></p>
<p>我们采用开发者工具观察HTTP请求头部，可以看出可以根据Accept头部来判断我们的浏览器是否支持WebP图片。为了利用这一点，并开始提供WebP图片，我们需要注册一个Service Worker。Service Worker的一大特性就是，它们能够拦截网络请求，这样子，我们就能够完全控制响应内容。使用这个特性，我们能够监听HTTP头部，并决定如何做。如果你想了解更多关于Service Workers的内容，可以看看这个<a href="https://github.com/slightlyoff/ServiceWorker" target="_blank" rel="external">Github</a>库获取更多的信息。</p>
<p>我们在html页面添加如下代码用于注册Service Worker。以下的代码引用service-worker.js文件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="comment">// Register the service worker</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">	navigator.serviceWorker.register(<span class="string">'/service-worker.js'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Registration was successful</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ServiceWorker registration successful with scope: '</span>, registration.scope);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// registration failed :(</span></span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="string">'ServiceWorker registration failed: '</span>, err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们做了一个简单的检查，判断浏览器是否支持Service Worker，如果支持，注册并安装Service Worker。这段代码代码最好的地方就是做了兼容处理，如果浏览器不支持Service Workers，它们会自动回退并且用户不会注意到其中差别。</p>
<p>接下来，我们需要创建Service Worker文件‘service-worker.js‘，用于拦截正在传递到服务器的请求。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen to fetch events</span></span><br><span class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if the image is a jpeg</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/\.jpg$|.png$/</span>.test(event.request.url)) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Inspect the accept header for WebP support</span></span><br><span class="line">  <span class="keyword">var</span> supportsWebp = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (event.request.headers.has(<span class="string">'accept'</span>))&#123;</span><br><span class="line">	supportsWebp = event.request.headers</span><br><span class="line">        	                    .get(<span class="string">'accept'</span>)</span><br><span class="line">                                    .includes(<span class="string">'webp'</span>);</span><br><span class="line">      	&#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// If we support WebP</span></span><br><span class="line">  	<span class="keyword">if</span> (supportsWebp)</span><br><span class="line">  	&#123;</span><br><span class="line">		<span class="comment">// Clone the request</span></span><br><span class="line">		<span class="keyword">var</span> req = event.request.clone();</span><br><span class="line"></span><br><span class="line">	        <span class="comment">// Build the return URL</span></span><br><span class="line">	    	<span class="keyword">var</span> returnUrl = req.url.substr(<span class="number">0</span>, req.url.lastIndexOf(<span class="string">"."</span>)) + <span class="string">".webp"</span>;</span><br><span class="line"></span><br><span class="line">		event.respondWith(</span><br><span class="line">		  fetch(returnUrl, &#123;</span><br><span class="line">		     mode: <span class="string">'no-cors'</span></span><br><span class="line">		   &#125;)</span><br><span class="line">		);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面的示例代码做了一系列的事情，让我们来一步步分解。</p>
<p>在前面几行，我添加一个事件监听器来监听任何一个fetch事件。当每个请求发生时，先判断当前的请求是否是获取JPEG或者PNG格式的图片。如果当前的请求是获取图片，我就能根据HTTP请求头部来决定最佳的响应。在这种情况下，我通过检查Accept头部并且查找是否存在“image/webp“ Mime类型。一旦查询完头部的值，我就能确定浏览器是否支持WebP图片，如果浏览器支持WebP图片，就返回相应的WebP图片。</p>
<p>现在，我们的HTML看起来比较整洁，能够支持WebP图片而并不臃肿。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">picture</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">source</span></span><br><span class="line">        <span class="attribute">media</span>=<span class="value">"(min-width: 1024px)"</span></span><br><span class="line">        <span class="attribute">srcset</span>=<span class="value">"./images/brooklyn.jpg, ./images/brooklyn-2x.jpg 2x, ./images/brooklyn-3x.jpg 3x"</span></span><br><span class="line">        <span class="attribute">type</span>=<span class="value">"image/jpeg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">source</span></span><br><span class="line">        <span class="attribute">media</span>=<span class="value">"(min-width: 320px)"</span></span><br><span class="line">        <span class="attribute">srcset</span>=<span class="value">"./images/brooklyn-small.jpg, ./images/brooklyn-small-2x.jpg 2x, ./images/brooklyn-small-3x.jpg 3x"</span></span><br><span class="line">        <span class="attribute">type</span>=<span class="value">"image/jpeg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Service Workers给了我们无限的可能。在这个例子中，我们可以扩展到包括其他图片格式，甚至是缓存。你还能轻松地添加支持IE的<a href="http://caniuse.com/#feat=jpegxr" target="_blank" rel="external">JPEGXR</a>。这样子，我们能够更快地给我们的用户展示我们的页面。</p>
<p>如果你想看看示例代码运行的效果，请移步到<a href="https://deanhume.github.io/Service-Workers-WebP" target="_blank" rel="external">deanhume.github.io/Service-Workers-WebP</a>。打开支持这些特性的浏览器，如Chrome，打开开发者工具，就可以看到页面的运行。</p>
<h3 id="参考资料">参考资料</h3><ul>
<li><a href="https://html.spec.whatwg.org/multipage/embedded-content.html#the-picture-element" target="_blank" rel="external">https://html.spec.whatwg.org/multipage/embedded-content.html#the-picture-element</a></li>
<li><a href="http://scottjehl.github.io/picturefill/" target="_blank" rel="external">http://scottjehl.github.io/picturefill/</a></li>
<li><a href="https://developers.google.com/speed/webp/" target="_blank" rel="external">https://developers.google.com/speed/webp/</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>译文地址：<a href="http://deanhume.com/Home/BlogPost/service-workers--dynamic-responsive-images-using-webp-images/10132/" target=]]>
    </summary>
    
      <category term="Fork" scheme="http://aotu.io/tags/Fork/"/>
    
      <category term="WebP" scheme="http://aotu.io/tags/WebP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Adobe FLASH CC制作Canvas动画]]></title>
    <link href="http://aotu.io/notes/2015/11/18/flash-canvas/"/>
    <id>http://aotu.io/notes/2015/11/18/flash-canvas/</id>
    <published>2015-11-17T18:44:25.000Z</published>
    <updated>2015-12-01T05:38:20.000Z</updated>
    <content type="html"><![CDATA[<p>flash可以导出canvas动画，大大缩短制作动画所需要的时间。它是一个可视化IDE，可以让我们写少很多代码。做出来的动画，可以更加精确。同时，可以通用使用帧脚本中的 Javascript，为资源添加交互性。</p>
<a id="more"></a>
<h2 id="新建HTML5_Canvas项目">新建HTML5 Canvas项目</h2><p class="user_img"><img src="/img/post/youing/1.png"></p>
<h3 id="舞台设置">舞台设置</h3><p>舞台大小修改为：600x600 (<em>这里可以根据设计稿调整所需要的舞台大小</em>)</p>
<h3 id="帧频">帧频</h3><p>是指每秒钟放映或显示的帧或图像的数量，这个数值设置越大，动画越快，但同时也是性能消耗大户。这里我们设置为36</p>
<p class="user_img"><img src="/img/post/youing/2.png"></p>
<h2 id="导入资源">导入资源</h2><p>文件 &gt; 导入 &gt; 导入到库</p>
<h2 id="布局">布局</h2><p>快捷键Ctrl + L或者窗口菜单下 &gt; 库</p>
<p>从资源库中把资源拖到舞台进去,通过移动拖拽的形式进行布局</p>
<p class="user_img"><img src="/img/post/youing/3.png"></p>
<h2 id="图形与影片剪辑">图形与影片剪辑</h2><p>我们可以将单独的动画，放到一个独立的影片剪辑里，这样可以更好的控制动画。几个独立的剪片剪辑，可以组成一个完整的动画。</p>
<p>当我们把图片从资源库拖到舞台时，它这个时候，只是普通的位图，并不能做补帧动画，所以我们必须把它转换成元件。</p>
<ul>
<li><strong>图形</strong>由矢量图或者是位图组成。</li>
<li><strong>影片剪辑</strong>包含在动画影片中的影片片段，有自己的时间轴和属性。具有交互性，是用途最广、功能最多的部分。</li>
</ul>
<p>下面制作以飘动的钱，做个例子说明</p>
<p>选择位图，右键 &gt; 转换为元件，这个时候，弹出一个对话窗口，我们首先选择“影片剪辑”，保存。双击进入刚才创始的影片剪辑，这个时候，由于刚才我们只是把位图转成了影片剪辑，但实际上，它里面，仍然是一个位图，所以并不能做动画操作。所以我们需要在影片剪辑里，把图片转换了“图形”。</p>
<p class="user_img"><img src="/img/post/youing/4.png"></p>
<h2 id="时间轴">时间轴</h2><p>上面已经把图片转成图形元件，所以我们现在需要时间轴某个地方中插入关键帧。这里我们在30,60帧处插入关键帧。然后在30帧处，移动元件的位置，然后在每个关键帧的中间右键，选择“创建传统补间”。速度可以通过删除或者增加两个关键帧的补间动画时间长度来控制。</p>
<p class="user_img"><img src="/img/post/youing/5.png"></p>
<p class="user_img"><img src="/img/post/youing/6.png"></p>
<h2 id="动作播放控制">动作播放控制</h2><p>如果我们希望动画可以连续从头再播放，可以在动画的最后一帧插入一个空白关键帧，打开动作面板，然后写上</p>
<pre><code>this.<span class="function"><span class="title">gotoAndPlay</span><span class="params">(<span class="number">0</span>)</span></span>
</code></pre><p class="user_img"><img src="/img/post/youing/7.png"></p>
<p>即可回到第一帧重新播放，如果希望停止动画，则</p>
<pre><code><span class="keyword">this</span>.stop();
</code></pre><p>如果希望跳到某帧去播放</p>
<pre><code>this.<span class="function"><span class="title">gotoAndPlay</span><span class="params">(n)</span></span>
</code></pre><p>如果希望跳到某帧并停止</p>
<pre><code>this.<span class="function"><span class="title">gotoAndStop</span><span class="params">(n)</span></span>
</code></pre><h2 id="发布">发布</h2><p>文件 &gt; 发布设置</p>
<h3 id="文件输出">文件输出</h3><ul>
<li>循环时间轴(<em>表示是否循环整个动画</em>)</li>
<li>覆盖HTML(<em>第一次发布时可以选上，如果对html有修改，记得把这个选项去掉,否则会对文件进行覆盖操作</em>)</li>
</ul>
<h3 id="资源导出选项">资源导出选项</h3><ul>
<li>图像(<em>是否导出雪碧图</em>)</li>
<li>javascript命名空间(<em>基本上不需要修改</em>)，这几个属于全局变量，可以在发布后的js文件中再修改。</li>
</ul>
<p class="user_img"><img src="/img/post/youing/8.png"></p>
<h3 id="生成html">生成html</h3><p>最终会生成一个html文件和一个js文件</p>
<h3 id="生成的html文件">生成的html文件</h3><ul>
<li>框架自带的preloadjs,可以轻松管理资源预加载，它提供了相关api可以进行loading等操作。</li>
</ul>
<p class="user_img"><img src="/img/post/youing/9.png"></p>
<h3 id="生成的js文件">生成的js文件</h3><ul>
<li>生成的动画配置及脚本都在这个js文件里面，如果需要，可以手动修改相关数据。</li>
</ul>
<p class="user_img"><img src="/img/post/youing/10.png"></p>
<h2 id="附上最终效果">附上最终效果</h2><p><a href="http://b.gengshu.net/doc/flash/people.html" target="_blank" rel="external">点我看效果</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>flash可以导出canvas动画，大大缩短制作动画所需要的时间。它是一个可视化IDE，可以让我们写少很多代码。做出来的动画，可以更加精确。同时，可以通用使用帧脚本中的 Javascript，为资源添加交互性。</p>]]>
    
    </summary>
    
      <category term="Canvas" scheme="http://aotu.io/tags/Canvas/"/>
    
      <category term="Flash" scheme="http://aotu.io/tags/Flash/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前方有坑，请绕道——Zepto 中使用 CORS]]></title>
    <link href="http://aotu.io/notes/2015/11/16/zepto-cors/"/>
    <id>http://aotu.io/notes/2015/11/16/zepto-cors/</id>
    <published>2015-11-16T12:24:22.000Z</published>
    <updated>2015-11-19T10:06:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前方有坑，请绕道——Zepto_中使用_CORS">前方有坑，请绕道——Zepto 中使用 CORS</h2><p>众所周知，现在移动 Web 开发中，<code>Zepto.js</code> 是使用频率比较高的库之一。由于它的体积小，加载速度快，有着和 <code>jquery</code> 类似的 API，而备受开发者喜爱。可随着时间的推移，我们遇到了不少 <code>Zepto</code> 的坑，而且文件体积的大小跟代码的执行效率并没有什么关系，最后我们发现 <code>Zepto</code> 并没有太大的卵用。</p>
<p>jsperf 上有个 <code>zepto</code> 和 <code>jquery</code> DOM 操作的对比测试，有兴趣可以看一下：<a href="http://jsperf.com/zepto-vs-jquery-2013/25" target="_blank" rel="external">zepto vs jquery - selectors</a></p>
<blockquote>
<p>开源项目好坏的一个评判标准之一：是否有一个强大的社区和一批积极的贡献者</p>
</blockquote>
<p>我们简单的看一个对比：<br><img src="http://jdc.jd.com/fd/blog_image/cors_pic_01.jpg" alt="zepto github"><br><img src="http://jdc.jd.com/fd/blog_image/cors_pic_02.jpg" alt="jquery github"></p>
<p>很明显，<code>Zepto</code> 的活跃度远远没有 <code>jquery</code> 高。不过言归正传，还是回到 <code>Zepto</code> 的话题上。</p>
<hr>
<p>一直以来，我们在移动端上面使用 <code>zepto</code>并没有出现太大的问题。直至我们将 Ajax 跨域请求从 iframe 的方式切换成 <code>CORS</code> 之后，一个比较隐蔽的 Bug 出现了。</p>
<h3 id="问题描述">问题描述</h3><ol>
<li>页面在Webview中，点击按钮无效</li>
<li>页面在部分浏览器中，无法拉取到用户的信息</li>
</ol>
<p>###问题定位</p>
<p>我通过 <code>Fiddler</code> 或 <code>Charles</code> 抓包发现，在 webview 中，点击按钮之后的 Ajax 请求并未发出，但是页面在手机QQ浏览器和 PC 上表现都是正常的。因为是在切换 CORS 之后，页面才出现异常的，在此之前并没有版本迭代。所以 CORS 代码首当其冲要进行深层次的 code-review，于是我直接在 <code>CORS</code> 的代码块上进行 <code>try-catch</code>，结果捕获到异常：</p>
<figure class="highlight"><figcaption><span>DOM Exception 11```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;###&#38382;&#39064;&#28145;&#20837;&#21078;&#26512;&#10;&#10;&#20808;&#26469;&#30475;&#30475;&#27979;&#35797;&#20195;&#30721;&#65306;</span><br></pre></td></tr></table></figure>
<p>if (options.withCredentials) {<br>    options = $.extend(options, {<br>        xhr: function() {<br>            var xhr = new window.XMLHttpRequest()<br>         xhr.withCredentails = true<br>         return xhr<br>     }<br>}}<br>delete options.withCredentails</p>
<p>$.ajax(options)<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="autohotkey">这段代码在大多数浏览器中都可以正常执行，但是在 Android 的 webview 和一些旧版本的手机浏览器中会抛出错误。</span><br><span class="line"></span><br><span class="line">以上代码和普通的 Ajax 请求不同的地方在于设置了 <span class="escape">`C</span>ORS<span class="escape">` </span>的 <span class="escape">`w</span>ithCredentials<span class="escape">` </span>属性。（<span class="escape">`C</span>ORS<span class="escape">` </span>请求默认是不会带上 <span class="escape">`c</span>ookies<span class="escape">` </span>等身份信息的，如果需要在请求中带上 <span class="escape">`c</span>ookies<span class="escape">`，</span>则需要设置 <span class="escape">`X</span>MLHttpRequest<span class="escape">` </span>的 <span class="escape">`w</span>ithCredentials<span class="escape">` </span>属性值为 <span class="literal">true</span>）</span><br><span class="line"></span><br><span class="line">下面通过两个例子来分析一下：</span><br><span class="line"></span><br><span class="line">例一：</span></span><br></pre></td></tr></table></figure></p>
<p>var xhr = new XMLHttpRequest()<br>xhr.withCrendentials = true<br>xhr.open(‘POST’, ‘url’, true)<br>xhr.send()<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="label">这段代码在部分浏览器中依旧会抛出异常：`INVALID_STATE_ERR:</span> DOM Exception <span class="number">11</span><span class="escape">`</span><br><span class="line"></span></span><br><span class="line">例二：</span><br></pre></td></tr></table></figure></p>
<p>var xhr = new XMLHttpRequest()<br>xhr.open(‘POST’, ‘url’, true)<br>xhr.withCredentials = true<br>xhr.send()<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这段代码可以正常执行，并不会抛出异常</span><br><span class="line">为什么 <span class="escape">`x</span>hr.withCredentials<span class="escape">` </span>赋值在 <span class="escape">`x</span>hr.open()<span class="escape">` </span>方法之前就会出错呢？</span><br><span class="line"></span><br><span class="line">秉着科(xian)学(de)严(dan)谨(teng)的态度，翻看了 W3C 在 <span class="number">2011</span> 年和 <span class="number">2012</span> 年关于 <span class="escape">`X</span>MLHttpRequest<span class="escape">` </span>的规范文档，发现使用 <span class="escape">`w</span>ithCredentials<span class="escape">` </span>属性的规范发生了改变。</span><br><span class="line"></span><br><span class="line"><span class="number">2011</span> 年的规范：</span><br><span class="line"><span class="label">![2011 CORS](http:</span>//jdc.jd.com/fd/blog_image/cors_pic_03.png)</span><br><span class="line"></span><br><span class="line"><span class="number">2012</span> 年的规范：</span><br><span class="line"><span class="label">![2012 CORS](http:</span>//jdc.jd.com/fd/blog_image/cors_pic_04.png)</span><br><span class="line"></span><br><span class="line">对比两份文档，我们重点看一下 step <span class="number">1</span>：</span><br><span class="line"><span class="number">2011</span> 年的规范中规定当 <span class="escape">`X</span>MLHttpRequest<span class="escape">` </span>的 <span class="escape">`r</span>eadyState<span class="escape">` </span>状态不是 <span class="escape">`O</span>PENED<span class="escape">` </span>时，会报错；</span><br><span class="line"><span class="number">2012</span> 年的规范中规定当 <span class="escape">`X</span>MLHttpRequest<span class="escape">` </span>的 <span class="escape">`r</span>eadyState<span class="escape">` </span>状态不是 <span class="escape">`U</span>NSENT<span class="escape">` </span>或 <span class="escape">`O</span>PENDED<span class="escape">` </span>时，会报错；</span><br><span class="line"></span><br><span class="line">下面简单介绍一下 <span class="escape">`X</span>MLHttpRequest<span class="escape">` </span>的 <span class="escape">`r</span>eadyState<span class="escape">` </span>值：</span><br><span class="line"></span><br><span class="line">| Value  | State | Description |</span><br><span class="line">| ------ | ----------- | -----------|</span><br><span class="line">| <span class="number">0</span> | UNSENT | open() has <span class="literal">not</span> been called yet. |</span><br><span class="line">| <span class="number">1</span> | OPENED | send() has <span class="literal">not</span> been called yet. |</span><br><span class="line">| <span class="number">2</span> | HEADERS_RECEIVED | send() has been called,<span class="literal">and</span> headers <span class="literal">and</span> status are available. |</span><br><span class="line">| <span class="number">3</span> | LOADING | Downloading<span class="comment">;responseText holds partial data |</span></span><br><span class="line">| <span class="number">4</span> | DONE | The operation is complete |</span><br><span class="line"></span><br><span class="line">由此可以看出，当一个 <span class="escape">`X</span>MLHttpRequest<span class="escape">` </span>对象被创建时，默认的 <span class="escape">`r</span>eadyState<span class="escape">` </span>状态为 <span class="escape">`U</span>NSENT<span class="escape">`，</span>只有执行了 open() 方法并且还没有执行 send() 方法时，<span class="escape">`r</span>eadyState<span class="escape">` </span>的状态才为 <span class="escape">`O</span>PENED<span class="escape">`。</span></span><br><span class="line"></span><br><span class="line">由于一些老版本的浏览器是按照 <span class="number">2012</span> 年之前的规范来实现的，所以这一部分浏览器中，open() 方法要在设置 <span class="escape">`w</span>ithCredentials<span class="escape">` </span>属性之前调用。因此为了兼容，正确的做法应该是在 open() 方法之后再设置 <span class="escape">`w</span>ithCredentials<span class="escape">` </span>属性。</span><br><span class="line"></span><br><span class="line">下面来看看 zepto.js v1.<span class="number">1.3</span> 的源码：</span><br></pre></td></tr></table></figure></p>
<p>if (settings.xhrFields) for (name in settings.xhrFields) xhr[name] = settings.xhrFields[name]</p>
<p>var async = ‘async’ in settings ? settings.async : true</p>
<p>xhr.open(settings.type, settings.url, async, settings.username, settings.password)<br>```</p>
<p><code>zepto</code> 是在 open() 方法之前设置 <code>XMLHttpRequest</code> 的属性值的，所以这会导致在使用 <code>CORS</code> 并且设置 <code>withCredentials</code> 的时候，代码在部分浏览器中报错。Android webview 中重现的几率很大。</p>
<hr>
<p>总结：在使用 <code>CORS</code> 时，如果要给 <code>withCredentials</code> 赋值，请务必要在 open() 方法之后，否则无法向后兼容。</p>
<p>对于 zepto.js 的问题，已经有用户向作者提交了 PR，作者也表示会在下个版本中修复（可是直到今天，都更新到 v1.1.6 版本了，还是没有修复这个问题，更改一下代码顺序就那么难吗？！难怪阿里也嫌 zepto 更新速度太慢，问题多，所以自己 fork 代码进行了定制化）。</p>
<p>所以目前如果要用 <code>zepto</code> 来进行 <code>CORS</code> 的话，还是需要自己更改 <code>zepto</code> 的 ajax 模块代码，然后手动构建。</p>
<hr>
<p>###参考资料：</p>
<p><a href="http://www.w3.org/TR/2011/WD-XMLHttpRequest2-20110816/#the-withcredentials-attribute" target="_blank" rel="external">XMLHttpRequest Level 2 2011</a><br><a href="http://www.w3.org/TR/XMLHttpRequest/" target="_blank" rel="external">XMLHttpRequest Level 1 2014</a><br><a href="http://www.w3.org/TR/XMLHttpRequest2/" target="_blank" rel="external">XMLHttpRequest Level 2 2014</a><br><a href="https://github.com/madrobby/zepto/issues/921" target="_blank" rel="external">Zepto issues</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前方有坑，请绕道——Zepto_中使用_CORS">前方有坑，请绕道——Zepto 中使用 CORS</h2><p>众所周知，现在移动 Web 开发中，<code>Zepto.js</code> 是使用频率比较高的库之一。由于它的体积小，加载速度快，有着和 <co]]>
    </summary>
    
      <category term="CORS" scheme="http://aotu.io/tags/CORS/"/>
    
      <category term="Zepto" scheme="http://aotu.io/tags/Zepto/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的vim二三事]]></title>
    <link href="http://aotu.io/notes/2015/11/16/vim-list/"/>
    <id>http://aotu.io/notes/2015/11/16/vim-list/</id>
    <published>2015-11-16T10:24:35.000Z</published>
    <updated>2015-11-26T07:35:12.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><blockquote>
<p>选择你所喜欢的，爱你所选择的–列夫·托尔斯泰</p>
</blockquote>
<h3 id="不是理由的理由">不是理由的理由</h3><p>用了几年Vim，我发现我越来越喜欢它了，和好多人一样喜欢它，也许喜欢的理由各不相同，但大抵有如下几个：</p>
<ul>
<li>即使你用了几年了，你还是会在某天惊呼原来还可以这么操作，<strong>它总会给你带来惊喜</strong>。</li>
<li>当你要操作的时候你根本不用去想那些快捷键(也许不能叫快捷键，它是谓语{operator}和宾语{text-objects}，组合在一起形成不同指令,好像自然语言)，它们就在你意识里。也许开始的时候你需要去记一些快捷键（别的编辑器不用吗？），但记住以后你熟练了，就像是骑自行车，你就忘记它的存在，你只用输出你的思想，<strong>它让你更专注你要做的事情本身</strong>。</li>
<li>虽然会有很多的快捷键以便让不同的人找到他们最佳的操作方式，但是<strong>每个人常用的不外乎特定的十几个快捷键</strong>，而这些快捷键都是有内在逻辑让你记住的，比如：d(elete)删除,D(elete)删除到行尾,d(elete)<br>a w(ord) 删除一个词。</li>
<li>如果懒，那么你学Vim是没错的，它是<strong>变化中的永恒</strong>，那么多的编辑器更新迭代，它们都有vi模式或vi插件，你可以用你所学，一如既往。</li>
<li>它有<strong>非常多的插件</strong>，你可以定制一些自己喜欢的强大功能。（这其实也是个缺点的吧，毕竟自己配置多费时间呀，不过好些人一个配置用了十多年）。<a href="http://www.zhihu.com/question/20151659" target="_blank" rel="external">到底有多强大呢，看看知乎上这篇文章。</a></li>
</ul>
<p>我知道上面这些说得太抽象了，也许我们应该来点具体的，你可以边看边对比一下你使用的编辑器的操作：</p>
<table>
<thead>
<tr>
<th style="text-align:left">编辑</th>
<th style="text-align:left">用 Vim</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">如何向下移动7行</td>
<td style="text-align:left">7j</td>
</tr>
<tr>
<td style="text-align:left">如何删除一个词（word）</td>
<td style="text-align:left">dw</td>
</tr>
<tr>
<td style="text-align:left">如何删除一行</td>
<td style="text-align:left">dd</td>
</tr>
<tr>
<td style="text-align:left">如何删除｛｝里的内容</td>
<td style="text-align:left">di{</td>
</tr>
<tr>
<td style="text-align:left">光标移动到第80行</td>
<td style="text-align:left">80G</td>
</tr>
<tr>
<td style="text-align:left">如何在当前文件里搜索光标所在位置的词</td>
<td style="text-align:left">*(#)</td>
</tr>
<tr>
<td style="text-align:left">如何在50行到100行之间查找并替换</td>
<td style="text-align:left">:50,100/old/new/g</td>
</tr>
<tr>
<td style="text-align:left">如果你想在同一文件中对比两个不同的块时怎么做</td>
<td style="text-align:left">:sp (to ‘split’ the view)</td>
</tr>
<tr>
<td style="text-align:left">如果你想要打开光标所在文件名的文件</td>
<td style="text-align:left">gf (which means ‘g’o to this ‘f’ile)</td>
</tr>
<tr>
<td style="text-align:left">如果你想要得到每行前10个字母而它后面的数据不是你想要的</td>
<td style="text-align:left">ctrl-v (win 下是ctrl-q)</td>
</tr>
<tr>
<td style="text-align:left">如果你想要转换别人给到你的混合大小的文件变成小写</td>
<td style="text-align:left">1GVG u</td>
</tr>
<tr>
<td style="text-align:left">录制一系列命令然后执行</td>
<td style="text-align:left">用宏</td>
</tr>
<tr>
<td style="text-align:left">在width:16px的数字16上加20</td>
<td style="text-align:left">20 ctrl+a</td>
</tr>
<tr>
<td style="text-align:left">输入23+45+119的结果</td>
<td style="text-align:left">ctrl+r=23+45+119</td>
</tr>
</tbody>
</table>
<p>以上的这些操作都是直接在键盘上操作的，没有用鼠标。</p>
<p>喜欢一个人的时候总能说出好多的理由，而不喜欢却只需要一个理由。此时我赞美我的女神你也在心里列举了你心中女神的诸多可爱美丽特点。所以可以想象各种关于编辑器文章下的各种互喷吐槽，即使是同一个编辑器的文章下也不免相互吐槽，毕竟不同人理念也是不一样的。</p>
<h3 id="有所为有所不为">有所为有所不为</h3><p>vim是个高效的文本编辑器，在文本编辑这一领域可谓是独步天下，高手<a href="http://zhuanlan.zhihu.com/vim-non-programming/19918627" target="_blank" rel="external">使用vim处理SRT字幕内容</a>，痴迷者除了使用vim写代码、<a href="http://www.vimer.cn?p=1222" target="_blank" rel="external">发邮件</a>、<a href="http://bluegene8210.is-programmer.com/posts/67910.html" target="_blank" rel="external">看股票</a>、写博客、写markdown(这篇文章就是vim写的markdown)还<a href="http://www.iplaysoft.com/vimium-and-vimperator.html" target="_blank" rel="external">使用vim浏览网页</a>，普通人可以把它作为<a href="http://blog.sina.com.cn/s/blog_45dac66f010005kw.html" target="_blank" rel="external">普通人的编辑利器</a>。在文本编辑领域，后来者只有模仿而无法超越vim。小李飞刀独步天下却也砍不了骨头，在代码编程领域，公认的最适合的场景是做Unix/Linux服务器编程,不用下载服务器端的文件而直接修改；其次是编写html/css/javascript/shell/python/c等；最后在mac、linux下要改文件用系统带的vim随手改改。而编写Java<br>EE、Objective-C等还是用Eclipse、XCode等IDE的比较好。</p>
<h3 id="君子性非异也，善假于物也">君子性非异也，善假于物也</h3><p>vim只是一个工具而已，它并不能让你码代码的能力提升，只能帮你更快速地输出你的思维。每一个工具都有它特定的场景，聪明的人总会在适当的场景做出合适的选择。好多人都说学习起来好难的呀，投入的成本换来的收益是不是成正比的呢？我觉得还是值得的，上面也说过，它是万变中的不变，同时它真的是个高效的工具，另外也许最后出来的高效的编辑外还带给你一些东西，比如好奇发现带来的惊喜，又如你发现你用了几年还有好多不会的谦虚，还有用宏解决了一个棘手问题的喜悦。最后它只是一个工具，是雕刻林诗音松木人像的小刀，或是冠绝武林的小李飞刀，关键在人。</p>
<h3 id="不积跬步无以至千里">不积跬步无以至千里</h3><p>佛渡有缘人，细想这个‘有缘人’还挺有意思的，其实就是信的人，不信的说再多也是没有用的。如果想学，不必卸载你的是编辑器，做出破釜沉舟之势，万一用了两天觉得不方便或是有紧急的要修改的内容，要换回来用熟悉的编辑器。另外也不要觉得一时学不会就感觉挫折，毕竟很多东西都不可一蹴而就的，需要一点积累，所以慢慢来的。那些《7天XX》《21精通XX》真的害了好多人，慢慢来，实在不行认为自己笨了，不还有勤能补拙吗？好多的编辑器都有vi插件或模式，你可以找一找然后装上试试的，等熟悉了觉得不满足了再换成vim，要是觉得一直用vi插件也不错的就一直用着，能解决问题的顺手的才是最高效的。</p>
<h3 id="选择你所喜欢的，爱你所选择的">选择你所喜欢的，爱你所选择的</h3><p>我在小学的时候搞了个小霸王说要学习五笔，然后字根没有背完就忘记了，大学时候再一个想起这个事决定再学五笔，然后没有几天又放弃了，毕业两年后想起学五笔这个事，心里有个结，于是又学起来了，然后一直在用，虽然是五笔混合模式，偶尔也用纯五笔模式。vim就是在我可以用五笔的时候开始学的，当时拿同事的vimrc来直接就用了，现在也在用的，只是改了少许的地方，一直在够用就好的状态，然后在用的时候觉得有什么不自然的地方就找一下答案的，慢慢地越来越顺手了。细想我这个慢方法还是可取的，那么多我的命令我只会我常用的十几个，但那也是够用的了，并且是越来越喜欢，看着别人用的也还常发现还有很多不会的东西。</p>
<p>再回首，一切是那样自然，一如vim的理念keep it simple，我也只装了平时常用的几个插件，还有一些比较强大的插件也没有用得着，所以没有装上。最近为了给同事们讲一下vim,才意识到虽然平时说vim有几个模式，但是用的时候自己也没有区分得很清楚，觉得就是一个整体，应该那样，有时候我们只是为了区分和认识一个东西才把它解构了，就像一首好的歌曲，我们只用觉得好听，那些乐评人说的为什么好感觉都很有道理。vim命令有多难记也还是有逻辑的；vim里可以快速精确的查找定位；vim真的好像一切文本皆对象，操作针对字符，词，行，块，文件这些对象；vim的设计哲学是如果你的工作只需要做一次，那没问题，怎么搞都行，如果你的工作是要重复地完成某些工作，则vim总可以帮你找到更少的按键方式来实现相同的目标。如<a href="http://vimgolf.com/" target="_blank" rel="external">VimGolf</a>所说Real Vim ninjas count every keystroke - do you?  </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><blockquote>
<p>选择你所喜欢的，爱你所选择的–列夫·托尔斯泰</p>
</blockquote>
<h3 id="不是理由的理由">不是理由的理由</h3><p>用了几年Vim，我发现我越来越喜欢它了，和好多人一样喜欢它，也许]]>
    </summary>
    
      <category term="Vim" scheme="http://aotu.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[探究transform动画元素的z-index]]></title>
    <link href="http://aotu.io/notes/2015/11/16/z-index-and-translate3d/"/>
    <id>http://aotu.io/notes/2015/11/16/z-index-and-translate3d/</id>
    <published>2015-11-16T00:24:35.000Z</published>
    <updated>2015-12-01T05:18:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="z-index_和_translate3d">z-index 和 translate3d</h2><p>在一次需求中，需要做出三张卡牌走马灯式滚动的效果，由于在前面的一张卡牌需要挡住后面的卡牌，自然而然地就用 z-index 使前面的卡牌显示在最上面，配以 transform 动画让“走马灯”滚起来，在开发过程中，在 PC 侧 Chrome 中表现良好，在本人手机浏览器中也表现良好，最后测试时却发现，在微信客户端或 QQ 客户端中打开页面出现问题，“走马灯”滚动时，卡牌先通过 transform 就位后，才把 z-index 设置较大的卡牌置于上面，感觉上非常的不流畅。</p>
<p><img src="http://labs.qiang.it/manjiz/postimgs/2015/151116_card.png" alt="image"></p>
<p>究其原因，发现这是某些浏览器的渲染规则，涉及到 <code>stacking context</code> 的概念，transform 的元素会创建新的 DOM，层级会在普通元素的上面，除了 transform ,还有哪些情况会创建新 <code>stacking context</code>呢？</p>
<p>MDN 上有相关介绍：</p>
<blockquote>
<ul>
<li>the root element (HTML),</li>
<li><strong>positioned (absolutely or relatively) with a z-index value other than “auto”,</strong></li>
<li><strong>a flex item with a z-index value other than “auto”,</strong></li>
<li><strong>elements with an opacity value less than 1,</strong></li>
<li><strong>elements with a transform value other than “none”,</strong></li>
<li>elements with a mix-blend-mode value other than “normal”,</li>
<li>elements with isolation set to “isolate”, on mobile WebKit and Chrome 22+, position: fixed always creates a new stacking context, even when z-index is “auto”,</li>
<li>specifing any attribute above in will-change even you don’t write themselves directly</li>
</ul>
</blockquote>
<p>下图是对 transform 和 opacity 的测试结果：</p>
<p><img src="http://labs.qiang.it/manjiz/postimgs/2015/151117_twotest.png" alt="image"></p>
<p>很明显，红色 div 都在绿色 div 上面了，说明真的有创建了个更高层级的 <code>stacking context</code>。再做进一步测试，我给两组的 div 都加了 <code>position:relative;z-index:1;</code>，结果绿色的都在上面了，手机微信上也一样，这能不能说明 z-index 对层级的影响大于 transform 和 opacity 呢。</p>
<p>至于 transform 变换的时候会让 z-index “临时失效”，其实并非 z-index 失效了，只是 z-index 被用在不同的 <code>stacking context</code> 上，而非在默认的 context 上同等地比较层级了。所以 DOM 在 transform 的工程中，DOM 处于一个新的 <code>stacking context</code> 里，z-index 也是相对于这个 <code>stacking context</code> 的，所以表现出来的实际是 <code>stacking context</code> 的层次，动画一结束，DOM 又回到默认的 context 里，这时的 z-index 才是在同一个 context 上的比较。</p>
<p>那该用什么方法来控制卡牌的层级，又能让动画流畅地表现呢，当然是 translate3d 中的 z-axis，很多时候我们并不知道它是用来做什么的，平常用得最多的只是它的 x-axis 和 y-axis，不妨先看个例子：</p>
<pre><code><span class="class">.box1</span> <span class="rules">{<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">100px</span></span></span>;<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">100px</span></span></span>;<span class="rule"><span class="attribute">background</span>:<span class="value">red</span></span>;<span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">perspective</span>(<span class="number">100px</span>) <span class="function">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100px</span>)</span></span>;}</span>
<span class="class">.box2</span> <span class="rules">{<span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">100px</span></span></span>;<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">100px</span></span></span>;<span class="rule"><span class="attribute">background</span>:<span class="value">blue</span></span>;<span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">perspective</span>(<span class="number">100px</span>) <span class="function">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200px</span>)</span></span>;}</span>
</code></pre><p>实际效果是，看不到它们，然后我们再设置 perspective 为 201px，这时可以很明显地看到，box2 占据了整个屏幕，而 box1 宽高约为 200px，唯有设置 translate3d(0,0,0) 时，宽高才为 100px。</p>
<p>现在可以来理解下 perspective 和 translate3d 的关系，perspective 可以比作镜头和 DOM 的距离，实际上设置多少都没影响，因为它通过跟 z-axis 上的数值比例来影响样式，它更像是一个刻度，而 translate3d 的 z-axis 则表示了 DOM 和屏幕的距离。假定镜头跟屏幕的距离固定了，z-axis 越大，DOM 逐渐远离屏幕，靠近镜头，这时 DOM 看起来也就越大，当 z-axis 大于或等于 perspective 时，DOM元素已经在我们镜头的后面了，所以也就看不到它了。</p>
<p><img src="http://labs.qiang.it/manjiz/postimgs/2015/151116_perspective.png" alt="image"></p>
<p>现在也就好理解为什么 perspective 和 translate3d 能够影响 DOM 的层级了，它们在屏幕和镜头之间的距离不同，所以就有了层次，移动端设备很好地表现了这个结论，但在 PC 的 Chrome 上测试则不然，我们仍需要 z-index 才会表现出我们需要的 层次关系。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="http://segmentfault.com/q/1010000002480824" target="_blank" rel="external">http://segmentfault.com/q/1010000002480824</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="z-index_和_translate3d">z-index 和 translate3d</h2><p>在一次需求中，需要做出三张卡牌走马灯式滚动的效果，由于在前面的一张卡牌需要挡住后面的卡牌，自然而然地就用 z-index 使前面的卡牌显示在最上面，配以 tra]]>
    </summary>
    
      <category term="translate3d" scheme="http://aotu.io/tags/translate3d/"/>
    
      <category term="zindex" scheme="http://aotu.io/tags/zindex/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PostCSS快速入门使用]]></title>
    <link href="http://aotu.io/notes/2015/11/15/start-postcss/"/>
    <id>http://aotu.io/notes/2015/11/15/start-postcss/</id>
    <published>2015-11-15T09:34:25.000Z</published>
    <updated>2015-12-01T05:17:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="初识PostCSS">初识PostCSS</h2><p>如果你第一次听说<code>PostCSS</code>这个东西，那么请看下面摘自官方<code>Github</code>的介绍：</p>
<blockquote>
<p>PostCSS is a tool for transforming CSS with JS Plugins. These plugins can support variables and mixins, transpile future CSS syntax, inline images, and more</p>
</blockquote>
<p>翻译成中文的意思如下：</p>
<blockquote>
<p>PostCSS 是一套利用JS插件实现的用来改变CSS的工具.这些插件能够支持变量和混合语法，转换未来CSS语法，内联图片，还有更多</p>
</blockquote>
<p>我们用过<code>Less</code>、<code>SASS</code>等工具来对CSS做<code>预处理</code>操作，按照它们约定的语法来书写并且最终转换成可用的样式，这付出的代价是<strong>必须先熟悉这个工具的书写语法</strong>。 </p>
<p>随着近几年 <a href="http://gruntjs.cn/" target="_blank" rel="external">Grunt</a>、<a href="http://gulpjs.com/" target="_blank" rel="external">Gulp</a>、<a href="http://webpack.github.io/docs/" target="_blank" rel="external">Webpack</a> 等自动化工具的兴起，<code>组合式应用</code>变得非常的热门，那<code>PostCSS</code>存在的意义是什么呢？答案是：<strong>CSS生态系统</strong></p>
<p><code>PostCSS</code>拥有非常多的插件，诸如自动为CSS添加浏览器前缀的插件<code>autoprefixer</code>、当前移动端最常用的<code>px</code>转<code>rem</code>插件<code>px2rem</code>，还有支持尚未成为CSS标准但特定可用的插件<code>cssnext</code>，还有很多很多。就连著名的<code>Bootstrap</code>在下一个版本<code>Bootstrap 5</code>也将使用<code>PostCSS</code>作为样式的基础。</p>
<p>一句话来概括PostCSS：<strong>CSS编译器能够做到的事情，它也可以做到，而且能够做得更好</strong></p>
<h3 id="快速使用PostCSS">快速使用PostCSS</h3><p>上面大致介绍了<code>PostCSS</code>，也许我们并没有在头脑里形成对它的认知，那下面我们就通过一个简单地实例来看看如何使用<code>PostCSS</code>。</p>
<p><code>PostCSS</code>得益于插件，支持Grunt,Gulp,webpack,Broccoli,Brunch还有ENB，这里我们将以<code>Gulp</code>作为实例来讲。</p>
<h4 id="环境准备">环境准备</h4><p>创建并进入我们的实例目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir postcss-demo &amp;&amp; <span class="built_in">cd</span> postcss-demo</span><br></pre></td></tr></table></figure>
<p>然后快速生成<code>package.json</code>文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --yes 参数能够帮助我们快速生成默认的package.json</span></span><br><span class="line">npm init --yes</span><br></pre></td></tr></table></figure>
<p>将上面创建的<code>package.json</code>文件的<code>main</code>参数改为<code>gulpfile.js</code>，然后安装我们所需的依赖</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gulp跟gulp-postcss是必须的，后面两个插件为了演示用途</span></span><br><span class="line">npm i gulp gulp-postcss autoprefixer autoprefixer-core cssnext --save-dev <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
<p>创建<code>gulpfile.js</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里用命令行进行创建，你也可以手动新建</span></span><br><span class="line">touch gulpfile.js</span><br></pre></td></tr></table></figure>
<h4 id="修改gulpfile-js">修改gulpfile.js</h4><p>将下面代码贴进<code>gulpfile.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> postcss = <span class="built_in">require</span>(<span class="string">'gulp-postcss'</span>);</span><br><span class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</span><br><span class="line"><span class="keyword">var</span> cssnext = <span class="built_in">require</span>(<span class="string">'cssnext'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义css任务</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//定义postcss任务流数组</span></span><br><span class="line">  <span class="keyword">var</span> processors = [</span><br><span class="line">    autoprefixer(&#123;</span><br><span class="line">      browsers:[<span class="string">'last 3 version'</span>],</span><br><span class="line">      cascade: <span class="literal">false</span>,</span><br><span class="line">      remove: <span class="literal">false</span></span><br><span class="line">    &#125;),</span><br><span class="line">    cssnext()</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./src/css/*.css'</span>)</span><br><span class="line">             .pipe(postcss(processors))</span><br><span class="line">             .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="创建示例样式">创建示例样式</h4><p>在项目根目录下创建src目录，再在src目录下面创建css目录，然后创建style.css文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里用命令创建，你也可以手动创建</span></span><br><span class="line">mkdir -p src/css &amp;&amp; touch style.css</span><br></pre></td></tr></table></figure>
<p>编辑样式如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">h1</span><span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value">flex</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="pseudo">:root</span> <span class="rules">&#123;</span><br><span class="line"><span class="rule"><span class="attribute">--fontSize</span>:<span class="value"> <span class="number">1rem</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">--mainColor</span>:<span class="value"> <span class="hexcolor">#12345678</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">--highlightColor</span>:<span class="value"> <span class="function">hwb</span>(<span class="number">190</span>, <span class="number">35%</span>, <span class="number">20%</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">body</span> <span class="rules">&#123;</span><br><span class="line"><span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="function">var</span>(--mainColor)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="function">var</span>(--fontSize)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="function">calc</span>(<span class="function">var</span>(--fontSize) * <span class="number">1.5</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="function">calc</span>((<span class="function">var</span>(--fontSize) / <span class="number">2</span>) + <span class="number">1px</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="运行实例">运行实例</h4><p>一切准备就绪之后可以在项目根目录下执行刚才我们定义的任务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp css</span><br></pre></td></tr></table></figure>
<p>如果不出什么意外的话就会在根目录下面生成一个<code>dist</code>文件夹，里面有一个样式文件，内容如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">body</span><span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value">-webkit-flex</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value">-ms-flexbox</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value">-webkit-box</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value">flex</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">body</span> <span class="rules">&#123;</span><br><span class="line"><span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#123456</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">color</span>:<span class="value"><span class="function">rgba</span>(<span class="number">18</span>, <span class="number">52</span>, <span class="number">86</span>, <span class="number">0.47059</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">16px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">1rem</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">line-height</span>:<span class="value"><span class="number">24px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">line-height</span>:<span class="value"><span class="number">1.5rem</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="function">calc</span>(<span class="number">0.5rem</span> + <span class="number">1px</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>我们可以看到我们写的样式自动添加了浏览器前缀，并且一些未来CSS语法也被转换了。</p>
<h2 id="了解PostCSS">了解PostCSS</h2><p>通过上面的实例我们应该知道<code>PostCSS</code>的使用方法，此时让我们先回想一下<code>CSS预处理器</code>的使用历程：</p>
<ol>
<li>学习该CSS预处理器的语法特性，诸如：变量定义、嵌套、继承</li>
<li>在特定后缀名(.less/.scss等)的文件按照上面的语法进行编写</li>
<li>通过Gulp/Grunt/Webpack等自动化工具或者手动编译成CSS样式</li>
</ol>
<p>而<code>PostCSS</code>的使用历程：</p>
<ol>
<li>直接按照CSS标准语法来书写CSS样式文件</li>
<li>通过Gulp/Grunt/Webpack等自动化工具加载PostCSS插件转换输出</li>
</ol>
<p>通过对比我们类比一个结论：<em>CSS预处理器好比给你一个工具箱，工具箱里面有什么东西该怎么拿已经跟你约定好，你必须按照这个规则来拿；而PostCSS好比给你一个盒子，你可以从旁边选择自己需要的工具放进盒子打包拿走，如果还不够用你可以自己造一个工具</em></p>
<h2 id="深入PostCSS">深入PostCSS</h2><p><code>PostCSS</code>自身只包括了<code>CSS分析器</code>，<code>CSS节点树API</code>，<code>source map生成器</code>，<code>CSS节点拼接器</code>，而基于<code>PostCSS</code>的插件都是使用了<code>CSS节点树API</code>来实现的。</p>
<p>我们都知道CSS的组成如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">element &#123;</span><br><span class="line">  prop1 : rule1 rule2 ...;</span><br><span class="line">  prop2 : rule1 rule2 ...;</span><br><span class="line">  prop2 : rule1 rule2 ...;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也就是一条一条的样式规则组成，每一条样式规则包含一个或多个属性跟值。所以<code>PostCSS</code>的执行过程大致如下：</p>
<ol>
<li><p>Parser<br> 利用<code>CSS分析器</code>读取CSS字符内容，得到一个完整的<code>节点树</code></p>
</li>
<li><p>Plugin<br> 对上面拿到的<code>节点树</code>利用<code>CSS节点树API</code>进行一系列的转换操作</p>
</li>
<li><p>Plugin<br> 利用<code>CSS节点拼接器</code>将上面转换之后的节点树重新组成CSS字符</p>
</li>
<li><p>Stringifier<br> 在上面转换期间可利用<code>source map生成器</code>表明转换前后字符的对应关系</p>
</li>
</ol>
<h3 id="PostCSS性能">PostCSS性能</h3><p>在PostCSS官方推特上看到，由JavaScript编写的PostCSS比C++编写的libsass还要快3倍，下面来自官方推特的截图:</p>
<p class="user_img"><img title="PostCSS性能对比图" class="test_img" src="/img/post/cnt1992/postcss.png" alt="PostCSS性能对比图"></p>
<p>如果你对上面的性能截图有疑问，可以亲自来<a href="https://github.com/postcss/benchmark" target="_blank" rel="external">这里</a>测试看看。</p>
<h3 id="开始编写自己的PostCSS插件">开始编写自己的PostCSS插件</h3><p><code>PostCSS</code>在自己的<a href="https://github.com/postcss/postcss#plugins" target="_blank" rel="external">Github</a>上放了一些常用的插件，更多的插件可以在<a href="http://postcss.parts/" target="_blank" rel="external">postcss.parts</a>进行搜索。</p>
<p>但有时候已有的插件不满足我们的需求，这个时候需要编写自己的PostCSS插件，下面我们将一步步创建一个简单的插件，这个插件功能非常简单，如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span><br><span class="line">  文件位置：src/css/style.css</span><br><span class="line"> */</span></span><br><span class="line"><span class="tag">h1</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">"\5FAE\8F6F\96C5\9ED1"</span>,<span class="function">fontstack</span>(<span class="string">'Arial'</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>当输入上面的样式时，会生成下面的样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line">  文件位置：dist/style.css</span><br><span class="line"> */</span></span><br><span class="line"><span class="tag">h1</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">"\5FAE\8F6F\96C5\9ED1"</span>,tahoma,arial</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="环境准备-1">环境准备</h4><p>我们将以<code>Gulp</code>作为基础来实现我们的插件，首先创建项目文件夹</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir postcss-plugin &amp;&amp; <span class="built_in">cd</span> postcss-plugin</span><br></pre></td></tr></table></figure>
<p>然后快速创建<code>package.json</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure>
<p>紧接着先安装必备的包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i gulp postcss gulp-postcss --save-dev <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
<p>再创建<code>gulpfile.js</code>并且输入下面内容:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> postcss = <span class="built_in">require</span>(<span class="string">'gulp-postcss'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> processors = [</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./src/css/*.css'</span>)</span><br><span class="line">             .pipe(postcss(processors))</span><br><span class="line">             .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="创建插件文件夹">创建插件文件夹</h4><p>我们在执行<code>npm install</code>安装的包都放置在<code>node_modules</code>文件夹下面，这里我们创建PostCSS的插件文件夹，注意：<strong>PostCSS的插件命名格式为：postcss-插件名字</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里采用命令新建文件夹，你也可以手动创建</span></span><br><span class="line">mkdir node_modules/postcss-fontstack</span><br></pre></td></tr></table></figure>
<h4 id="创建插件入口文件">创建插件入口文件</h4><p>现在我们可以在<code>postcss-fontstack</code>文件夹创建入口文件<code>index.js</code>，<code>PostCSS</code>创建插件的方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> postcss = <span class="built_in">require</span>(<span class="string">'postcss'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = postcss.plugin(<span class="string">'插件名字'</span>, <span class="function"><span class="keyword">function</span> 插件名字(<span class="params">选项</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//这里写插件代码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>那我们可以在<code>index.js</code>里面贴入下面代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> postcss = <span class="built_in">require</span>(<span class="string">'postcss'</span>);</span><br><span class="line"></span><br><span class="line">modules.exports = postcss.plugin(<span class="string">'fontstack'</span>, <span class="function"><span class="keyword">function</span> <span class="title">fontstack</span>(<span class="params"> options </span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> css </span>)</span>&#123;</span><br><span class="line">    options = options || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fontstack_config = &#123;</span><br><span class="line">      <span class="string">'Arial'</span>: <span class="string">'tahoma,arial'</span>,</span><br><span class="line">      <span class="string">'Times New Roman'</span>: <span class="string">'TimesNewRoman, "Times New Roman", Times, Baskerville, Georgia, serif'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">toTitleCase</span>(<span class="params"> str </span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> str.replace(<span class="regexp">/\w\S*/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params"> txt </span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> txt.charAt(<span class="number">0</span>).toUpperCase() + txt.substr(<span class="number">1</span>).toLowerCase();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// css.walkRules方法用来遍历每一条css规则</span></span><br><span class="line">    css.walkRules( <span class="function"><span class="keyword">function</span>(<span class="params"> rule </span>)</span>&#123;</span><br><span class="line">        <span class="comment">// walkDecls方法用来解析属性跟值</span></span><br><span class="line">        rule.walkDecls( <span class="function"><span class="keyword">function</span>(<span class="params"> decl, i </span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> value = decl.value;</span><br><span class="line">            <span class="keyword">if</span>( value.indexOf( <span class="string">'fontstack('</span> ) !== -<span class="number">1</span> )&#123;</span><br><span class="line">                <span class="keyword">var</span> fontstack_requested = value.match(<span class="regexp">/\(([^)]+)\)/</span>)[<span class="number">1</span>].replace(<span class="regexp">/["']/g</span>,<span class="string">""</span>);</span><br><span class="line">                fontstack_requested = toTitleCase( fontstack_requested );</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> fontstack = fontstack_config[ fontstack_requested ];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> firstFont = value.substr( <span class="number">0</span>, value.indexOf(<span class="string">'fontstack('</span>) );</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> newValue = firstFont + fontstack;</span><br><span class="line"></span><br><span class="line">                decl.value = newValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在<code>gulpfile.js</code>引入上面的插件，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> postcss = <span class="built_in">require</span>(<span class="string">'gulp-postcss'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> processors = [</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./src/css/*.css'</span>)</span><br><span class="line">             .pipe(postcss(processors))</span><br><span class="line">             .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="运行实例-1">运行实例</h4><p>在项目根目录下运行实例，最终实现我们的效果</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp css</span><br></pre></td></tr></table></figure>
<h2 id="再谈PostCSS">再谈PostCSS</h2><p>基于<code>PostCSS</code>能够做到很多<code>CSS预处理器</code>做不到的事情，未来发展前景还是挺不错的，而且最新的<code>Atom</code>编辑器也可以下载插件来支持<code>PostCSS</code>这种语法。</p>
<p>但这就意味着<code>CSS预处理器</code>过时了么？不会。<code>PostCSS</code>的出现并不是为了替换掉之前的技术，只是提供多一种思路让我们去考虑，就比如Sass编译后再加<code>autoprefixer</code>自动补齐浏览器前缀这种做法当前还是比较流行的。</p>
<p>再回到文章最开始说的，<code>PostCSS</code>其实是在打造一个改变CSS开发方式的生态系统。也许暂时我们还是保持传统的开发方式，但未来对于<code>PostCSS</code>我还是保持关注，它是值得期待的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="初识PostCSS">初识PostCSS</h2><p>如果你第一次听说<code>PostCSS</code>这个东西，那么请看下面摘自官方<code>Github</code>的介绍：</p>
<blockquote>
<p>PostCSS is a tool]]>
    </summary>
    
      <category term="PostCSS" scheme="http://aotu.io/tags/PostCSS/"/>
    
  </entry>
  
</feed>
